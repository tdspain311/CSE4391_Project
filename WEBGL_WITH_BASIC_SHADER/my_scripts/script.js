var canvas;                     // global variable that describes the canvas
var gl;                         // global variable that describes the webgl context

var vertices = [];              // global array for vertices
var Vertices_Buffer;            // global buffer for vertices
var vertices_length;            // how many to take at a time like 3 (x, y, z)

var faces = [];                 // global array that holds faces
var Faces_Buffer;               // global buffer for faces
var faces_length;               // number of elements in faces array

var ModelMatrix;                   // model_view_matrix [Model coordinates to World Coordinates]
var ViewMatrix;                 // view_matrix       [World coordinates to camera coordinates]
var ProjectionMatrix;           // projection_matrix [Camera coordinates to Homogeneous Coordinates]

var shaderProgram;              // global variable for the shader program
var vertexPositionAttribute;    // global vertex position attribute which is set in the init shader function and referenced by html

// May need these later
var projection_Frustum;                  // global variable to simulate glFrustum
var projection_Ortho;                    // global variable to simulate glOrtho
var glLookAt;


// dont think i am using these two
var width;                      // width of the canvas
var height;                     // height of the canvas

// my own key handler
// Keyboard events
var currentlyPressedKeys = {};
function handleKeyDown(event)
{
    //alert(event.keyCode);     // turn this on to see what was pressed
    currentlyPressedKeys[event.keyCode] = true;
}
function handleKeyUp(event)
{
    currentlyPressedKeys[event.keyCode] = false;
}

//Global variables for rotation
var rotate_x = 0;
var rotate_y = 0;
var rotate_z = 0;

//Global variables for scaling
var scale_x = 1;
var scale_y = 1;
var scale_z = 1;

function handleKeys()
{
    // Handle rotations
    if      (currentlyPressedKeys[88]){rotate_x += 15;}//x
    else if (currentlyPressedKeys[67]){rotate_x -= 15;}//c

    else if (currentlyPressedKeys[89]){rotate_y += 15;}//y
    else if (currentlyPressedKeys[85]){rotate_y -= 15;}//u

    else if (currentlyPressedKeys[90]){rotate_z += 15;}//z
    else if (currentlyPressedKeys[66]){rotate_z -= 15;}//b

    // Handle Scaling
    else if (currentlyPressedKeys[65]){scale_x += 0.005;}
    else if (currentlyPressedKeys[83]){scale_x -= 0.005;}

    else if (currentlyPressedKeys[68]){scale_y += 0.005;}
    else if (currentlyPressedKeys[70]){scale_y -= 0.005;}

    else if (currentlyPressedKeys[71]){scale_z += 0.005;}
    else if (currentlyPressedKeys[72]){scale_z -= 0.005;}

    else if (currentlyPressedKeys[13]){loadIdentity();}


}


// start
// Called when the canvas is created to get started
function start()
{
    canvas = document.getElementById("glcanvas");
    initWebGL(canvas);                      // Initialize the GL context
    if (gl)                                 // Only continue if WebGL is available and working
    {
//        gl.clearColor(0.2, 0.2, 0.2, 1.0);  // Clear to somewhat grey
        gl.clearDepth(1.0);                 // Clear everything
        gl.enable(gl.DEPTH_TEST);           // Enable depth testing
        gl.depthFunc(gl.LEQUAL);            // Near things obscure far things

        initShaders();                      // Initialize the shaders; this is where all the lighting for the vertices and so forth is established.

        initBuffers();                      // Initialize all the buffers for vertices, faces, colors, normals (everything that builds the objects)

        // added the key handlers
        document.onkeydown = handleKeyDown;
        document.onkeyup = handleKeyUp;
        // added these
        tick();
        //setInterval(drawScene, 15);         // Set up to draw the scene periodically 15 ms.
    }
}



function tick()
{
    requestAnimFrame(tick);
    handleKeys();
    drawScene();
}

// initWebGL
// Initialize WebGL, returning the GL context or null if
// WebGL isn't available or could not be initialized.
function initWebGL()
{
    gl = null;
    try
    {
        gl = canvas.getContext("experimental-webgl", { preserveDrawingBuffer: true });
        // Not sure if the following two lines is a good idea
        gl.viewportWidth = canvas.width;
        gl.viewportHeight = canvas.height;
    }
    catch(e){}
    // If we don't have a GL context, give up now
    if (!gl){alert("Unable to initialize WebGL. Your browser may not support it.");}
}

// initBuffers
// Initialize the buffers we'll need.
function initBuffers()
{
    // Create a buffer for the cube's vertices.
    Vertices_Buffer = gl.createBuffer();

    // Select the Vertices_Buffer as the one to apply vertex
    // operations to from here out.
    gl.bindBuffer(gl.ARRAY_BUFFER, Vertices_Buffer);

    // Now create an array of vertices for the object
    // this is the pyramid
    //var vertices = [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.5, 0.5, 1.0] ;
    // this is the teapot
    var vertices = [0.0, -1.5, 2.4, 0.0, -1.4715, 2.4482, 0.0, -1.4419, 2.4804, 0.0, -1.4147, 2.4964, 0.0, -1.3934, 2.4964, 0.0, -1.3816, 2.4804, 0.0, -1.3826, 2.4482, 0.0, -1.4, 2.4, 0.3476, -1.461, 2.4, 0.341, -1.4332, 2.4482, 0.3341, -1.4044, 2.4804, 0.3278, -1.3779, 2.4964, 0.3229, -1.3572, 2.4964, 0.3201, -1.3456, 2.4804, 0.3204, -1.3466, 2.4482, 0.3244, -1.3636, 2.4, 0.6647, -1.3496, 2.4, 0.6521, -1.3239, 2.4482, 0.639, -1.2973, 2.4804, 0.6269, -1.2728, 2.4964, 0.6175, -1.2537, 2.4964, 0.6122, -1.243, 2.4804, 0.6127, -1.2439, 2.4482, 0.6204, -1.2596, 2.4, 0.943, -1.1741, 2.4, 0.9251, -1.1518, 2.4482, 0.9065, -1.1286, 2.4804, 0.8894, -1.1074, 2.4964, 0.876, -1.0907, 2.4964, 0.8686, -1.0814, 2.4804, 0.8692, -1.0822, 2.4482, 0.8802, -1.0958, 2.4, 1.1741, -0.943, 2.4, 1.1518, -0.9251, 2.4482, 1.1286, -0.9065, 2.4804, 1.1074, -0.8894, 2.4964, 1.0907, -0.876, 2.4964, 1.0814, -0.8686, 2.4804, 1.0822, -0.8692, 2.4482, 1.0958, -0.8802, 2.4, 1.3496, -0.6647, 2.4, 1.3239, -0.6521, 2.4482, 1.2973, -0.639, 2.4804, 1.2728, -0.6269, 2.4964, 1.2537, -0.6175, 2.4964, 1.243, -0.6122, 2.4804, 1.2439, -0.6127, 2.4482, 1.2596, -0.6204, 2.4, 1.461, -0.3476, 2.4, 1.4332, -0.341, 2.4482, 1.4044, -0.3341, 2.4804, 1.3779, -0.3278, 2.4964, 1.3572, -0.3229, 2.4964, 1.3456, -0.3201, 2.4804, 1.3466, -0.3204, 2.4482, 1.3636, -0.3244, 2.4, 1.5, 0.0, 2.4, 1.4715, 0.0, 2.4482, 1.4419, 0.0, 2.4804, 1.4147, 0.0, 2.4964, 1.3934, 0.0, 2.4964, 1.3816, 0.0, 2.4804, 1.3826, 0.0, 2.4482, 1.4, 0.0, 2.4, -1.5, 0.0, 2.4, -1.4715, 0.0, 2.4482, -1.4419, 0.0, 2.4804, -1.4147, 0.0, 2.4964, -1.3934, 0.0, 2.4964, -1.3816, 0.0, 2.4804, -1.3826, 0.0, 2.4482, -1.4, 0.0, 2.4, -1.461, -0.3476, 2.4, -1.4332, -0.341, 2.4482, -1.4044, -0.3341, 2.4804, -1.3779, -0.3278, 2.4964, -1.3572, -0.3229, 2.4964, -1.3456, -0.3201, 2.4804, -1.3466, -0.3204, 2.4482, -1.3636, -0.3244, 2.4, -1.3496, -0.6647, 2.4, -1.3239, -0.6521, 2.4482, -1.2973, -0.639, 2.4804, -1.2728, -0.6269, 2.4964, -1.2537, -0.6175, 2.4964, -1.243, -0.6122, 2.4804, -1.2439, -0.6127, 2.4482, -1.2596, -0.6204, 2.4, -1.1741, -0.943, 2.4, -1.1518, -0.9251, 2.4482, -1.1286, -0.9065, 2.4804, -1.1074, -0.8894, 2.4964, -1.0907, -0.876, 2.4964, -1.0814, -0.8686, 2.4804, -1.0822, -0.8692, 2.4482, -1.0958, -0.8802, 2.4, -0.943, -1.1741, 2.4, -0.9251, -1.1518, 2.4482, -0.9065, -1.1286, 2.4804, -0.8894, -1.1074, 2.4964, -0.876, -1.0907, 2.4964, -0.8686, -1.0814, 2.4804, -0.8692, -1.0822, 2.4482, -0.8802, -1.0958, 2.4, -0.6647, -1.3496, 2.4, -0.6521, -1.3239, 2.4482, -0.639, -1.2973, 2.4804, -0.6269, -1.2728, 2.4964, -0.6175, -1.2537, 2.4964, -0.6122, -1.243, 2.4804, -0.6127, -1.2439, 2.4482, -0.6204, -1.2596, 2.4, -0.3476, -1.461, 2.4, -0.341, -1.4332, 2.4482, -0.3341, -1.4044, 2.4804, -0.3278, -1.3779, 2.4964, -0.3229, -1.3572, 2.4964, -0.3201, -1.3456, 2.4804, -0.3204, -1.3466, 2.4482, -0.3244, -1.3636, 2.4, 0.0, -1.5, 2.4, 0.0, -1.4715, 2.4482, 0.0, -1.4419, 2.4804, 0.0, -1.4147, 2.4964, 0.0, -1.3934, 2.4964, 0.0, -1.3816, 2.4804, 0.0, -1.3826, 2.4482, 0.0, -1.4, 2.4, 0.0, 1.5, 2.4, 0.0, 1.4715, 2.4482, 0.0, 1.4419, 2.4804, 0.0, 1.4147, 2.4964, 0.0, 1.3934, 2.4964, 0.0, 1.3816, 2.4804, 0.0, 1.3826, 2.4482, 0.0, 1.4, 2.4, -0.3476, 1.461, 2.4, -0.341, 1.4332, 2.4482, -0.3341, 1.4044, 2.4804, -0.3278, 1.3779, 2.4964, -0.3229, 1.3572, 2.4964, -0.3201, 1.3456, 2.4804, -0.3204, 1.3466, 2.4482, -0.3244, 1.3636, 2.4, -0.6647, 1.3496, 2.4, -0.6521, 1.3239, 2.4482, -0.639, 1.2973, 2.4804, -0.6269, 1.2728, 2.4964, -0.6175, 1.2537, 2.4964, -0.6122, 1.243, 2.4804, -0.6127, 1.2439, 2.4482, -0.6204, 1.2596, 2.4, -0.943, 1.1741, 2.4, -0.9251, 1.1518, 2.4482, -0.9065, 1.1286, 2.4804, -0.8894, 1.1074, 2.4964, -0.876, 1.0907, 2.4964, -0.8686, 1.0814, 2.4804, -0.8692, 1.0822, 2.4482, -0.8802, 1.0958, 2.4, -1.1741, 0.943, 2.4, -1.1518, 0.9251, 2.4482, -1.1286, 0.9065, 2.4804, -1.1074, 0.8894, 2.4964, -1.0907, 0.876, 2.4964, -1.0814, 0.8686, 2.4804, -1.0822, 0.8692, 2.4482, -1.0958, 0.8802, 2.4, -1.3496, 0.6647, 2.4, -1.3239, 0.6521, 2.4482, -1.2973, 0.639, 2.4804, -1.2728, 0.6269, 2.4964, -1.2537, 0.6175, 2.4964, -1.243, 0.6122, 2.4804, -1.2439, 0.6127, 2.4482, -1.2596, 0.6204, 2.4, -1.461, 0.3476, 2.4, -1.4332, 0.341, 2.4482, -1.4044, 0.3341, 2.4804, -1.3779, 0.3278, 2.4964, -1.3572, 0.3229, 2.4964, -1.3456, 0.3201, 2.4804, -1.3466, 0.3204, 2.4482, -1.3636, 0.3244, 2.4, -1.5, 0.0, 2.4, -1.4715, 0.0, 2.4482, -1.4419, 0.0, 2.4804, -1.4147, 0.0, 2.4964, -1.3934, 0.0, 2.4964, -1.3816, 0.0, 2.4804, -1.3826, 0.0, 2.4482, -1.4, 0.0, 2.4, 1.5, 0.0, 2.4, 1.4715, 0.0, 2.4482, 1.4419, 0.0, 2.4804, 1.4147, 0.0, 2.4964, 1.3934, 0.0, 2.4964, 1.3816, 0.0, 2.4804, 1.3826, 0.0, 2.4482, 1.4, 0.0, 2.4, 1.461, 0.3476, 2.4, 1.4332, 0.341, 2.4482, 1.4044, 0.3341, 2.4804, 1.3779, 0.3278, 2.4964, 1.3572, 0.3229, 2.4964, 1.3456, 0.3201, 2.4804, 1.3466, 0.3204, 2.4482, 1.3636, 0.3244, 2.4, 1.3496, 0.6647, 2.4, 1.3239, 0.6521, 2.4482, 1.2973, 0.639, 2.4804, 1.2728, 0.6269, 2.4964, 1.2537, 0.6175, 2.4964, 1.243, 0.6122, 2.4804, 1.2439, 0.6127, 2.4482, 1.2596, 0.6204, 2.4, 1.1741, 0.943, 2.4, 1.1518, 0.9251, 2.4482, 1.1286, 0.9065, 2.4804, 1.1074, 0.8894, 2.4964, 1.0907, 0.876, 2.4964, 1.0814, 0.8686, 2.4804, 1.0822, 0.8692, 2.4482, 1.0958, 0.8802, 2.4, 0.943, 1.1741, 2.4, 0.9251, 1.1518, 2.4482, 0.9065, 1.1286, 2.4804, 0.8894, 1.1074, 2.4964, 0.876, 1.0907, 2.4964, 0.8686, 1.0814, 2.4804, 0.8692, 1.0822, 2.4482, 0.8802, 1.0958, 2.4, 0.6647, 1.3496, 2.4, 0.6521, 1.3239, 2.4482, 0.639, 1.2973, 2.4804, 0.6269, 1.2728, 2.4964, 0.6175, 1.2537, 2.4964, 0.6122, 1.243, 2.4804, 0.6127, 1.2439, 2.4482, 0.6204, 1.2596, 2.4, 0.3476, 1.461, 2.4, 0.341, 1.4332, 2.4482, 0.3341, 1.4044, 2.4804, 0.3278, 1.3779, 2.4964, 0.3229, 1.3572, 2.4964, 0.3201, 1.3456, 2.4804, 0.3204, 1.3466, 2.4482, 0.3244, 1.3636, 2.4, 0.0, 1.5, 2.4, 0.0, 1.4715, 2.4482, 0.0, 1.4419, 2.4804, 0.0, 1.4147, 2.4964, 0.0, 1.3934, 2.4964, 0.0, 1.3816, 2.4804, 0.0, 1.3826, 2.4482, 0.0, 1.4, 2.4, 0.0, -2.0, 0.9, 0.0, -1.9854, 1.0972, 0.0, -1.9446, 1.3023, 0.0, -1.8819, 1.514, 0.0, -1.8017, 1.7309, 0.0, -1.7085, 1.9517, 0.0, -1.6064, 2.1752, 0.0, -1.5, 2.4, 0.4634, -1.948, 0.9, 0.4601, -1.9338, 1.0972, 0.4506, -1.894, 1.3023, 0.4361, -1.833, 1.514, 0.4175, -1.7549, 1.7309, 0.3959, -1.664, 1.9517, 0.3722, -1.5646, 2.1752, 0.3476, -1.461, 2.4, 0.8863, -1.7994, 0.9, 0.8798, -1.7863, 1.0972, 0.8617, -1.7496, 1.3023, 0.834, -1.6932, 1.514, 0.7984, -1.621, 1.7309, 0.7571, -1.5371, 1.9517, 0.7119, -1.4453, 2.1752, 0.6647, -1.3496, 2.4, 1.2574, -1.5655, 0.9, 1.2482, -1.5541, 1.0972, 1.2226, -1.5221, 1.3023, 1.1831, -1.4731, 1.514, 1.1327, -1.4103, 1.7309, 1.0741, -1.3373, 1.9517, 1.0099, -1.2574, 2.1752, 0.943, -1.1741, 2.4, 1.5655, -1.2574, 0.9, 1.5541, -1.2482, 1.0972, 1.5221, -1.2226, 1.3023, 1.4731, -1.1831, 1.514, 1.4103, -1.1327, 1.7309, 1.3373, -1.0741, 1.9517, 1.2574, -1.0099, 2.1752, 1.1741, -0.943, 2.4, 1.7994, -0.8863, 0.9, 1.7863, -0.8798, 1.0972, 1.7496, -0.8617, 1.3023, 1.6932, -0.834, 1.514, 1.621, -0.7984, 1.7309, 1.5371, -0.7571, 1.9517, 1.4453, -0.7119, 2.1752, 1.3496, -0.6647, 2.4, 1.948, -0.4634, 0.9, 1.9338, -0.4601, 1.0972, 1.894, -0.4506, 1.3023, 1.833, -0.4361, 1.514, 1.7549, -0.4175, 1.7309, 1.664, -0.3959, 1.9517, 1.5646, -0.3722, 2.1752, 1.461, -0.3476, 2.4, 2.0, 0.0, 0.9, 1.9854, 0.0, 1.0972, 1.9446, 0.0, 1.3023, 1.8819, 0.0, 1.514, 1.8017, 0.0, 1.7309, 1.7085, 0.0, 1.9517, 1.6064, 0.0, 2.1752, 1.5, 0.0, 2.4, -2.0, 0.0, 0.9, -1.9854, 0.0, 1.0972, -1.9446, 0.0, 1.3023, -1.8819, 0.0, 1.514, -1.8017, 0.0, 1.7309, -1.7085, 0.0, 1.9517, -1.6064, 0.0, 2.1752, -1.5, 0.0, 2.4, -1.948, -0.4634, 0.9, -1.9338, -0.4601, 1.0972, -1.894, -0.4506, 1.3023, -1.833, -0.4361, 1.514, -1.7549, -0.4175, 1.7309, -1.664, -0.3959, 1.9517, -1.5646, -0.3722, 2.1752, -1.461, -0.3476, 2.4, -1.7994, -0.8863, 0.9, -1.7863, -0.8798, 1.0972, -1.7496, -0.8617, 1.3023, -1.6932, -0.834, 1.514, -1.621, -0.7984, 1.7309, -1.5371, -0.7571, 1.9517, -1.4453, -0.7119, 2.1752, -1.3496, -0.6647, 2.4, -1.5655, -1.2574, 0.9, -1.5541, -1.2482, 1.0972, -1.5221, -1.2226, 1.3023, -1.4731, -1.1831, 1.514, -1.4103, -1.1327, 1.7309, -1.3373, -1.0741, 1.9517, -1.2574, -1.0099, 2.1752, -1.1741, -0.943, 2.4, -1.2574, -1.5655, 0.9, -1.2482, -1.5541, 1.0972, -1.2226, -1.5221, 1.3023, -1.1831, -1.4731, 1.514, -1.1327, -1.4103, 1.7309, -1.0741, -1.3373, 1.9517, -1.0099, -1.2574, 2.1752, -0.943, -1.1741, 2.4, -0.8863, -1.7994, 0.9, -0.8798, -1.7863, 1.0972, -0.8617, -1.7496, 1.3023, -0.834, -1.6932, 1.514, -0.7984, -1.621, 1.7309, -0.7571, -1.5371, 1.9517, -0.7119, -1.4453, 2.1752, -0.6647, -1.3496, 2.4, -0.4634, -1.948, 0.9, -0.4601, -1.9338, 1.0972, -0.4506, -1.894, 1.3023, -0.4361, -1.833, 1.514, -0.4175, -1.7549, 1.7309, -0.3959, -1.664, 1.9517, -0.3722, -1.5646, 2.1752, -0.3476, -1.461, 2.4, 0.0, -2.0, 0.9, 0.0, -1.9854, 1.0972, 0.0, -1.9446, 1.3023, 0.0, -1.8819, 1.514, 0.0, -1.8017, 1.7309, 0.0, -1.7085, 1.9517, 0.0, -1.6064, 2.1752, 0.0, -1.5, 2.4, 0.0, 2.0, 0.9, 0.0, 1.9854, 1.0972, 0.0, 1.9446, 1.3023, 0.0, 1.8819, 1.514, 0.0, 1.8017, 1.7309, 0.0, 1.7085, 1.9517, 0.0, 1.6064, 2.1752, 0.0, 1.5, 2.4, -0.4634, 1.948, 0.9, -0.4601, 1.9338, 1.0972, -0.4506, 1.894, 1.3023, -0.4361, 1.833, 1.514, -0.4175, 1.7549, 1.7309, -0.3959, 1.664, 1.9517, -0.3722, 1.5646, 2.1752, -0.3476, 1.461, 2.4, -0.8863, 1.7994, 0.9, -0.8798, 1.7863, 1.0972, -0.8617, 1.7496, 1.3023, -0.834, 1.6932, 1.514, -0.7984, 1.621, 1.7309, -0.7571, 1.5371, 1.9517, -0.7119, 1.4453, 2.1752, -0.6647, 1.3496, 2.4, -1.2574, 1.5655, 0.9, -1.2482, 1.5541, 1.0972, -1.2226, 1.5221, 1.3023, -1.1831, 1.4731, 1.514, -1.1327, 1.4103, 1.7309, -1.0741, 1.3373, 1.9517, -1.0099, 1.2574, 2.1752, -0.943, 1.1741, 2.4, -1.5655, 1.2574, 0.9, -1.5541, 1.2482, 1.0972, -1.5221, 1.2226, 1.3023, -1.4731, 1.1831, 1.514, -1.4103, 1.1327, 1.7309, -1.3373, 1.0741, 1.9517, -1.2574, 1.0099, 2.1752, -1.1741, 0.943, 2.4, -1.7994, 0.8863, 0.9, -1.7863, 0.8798, 1.0972, -1.7496, 0.8617, 1.3023, -1.6932, 0.834, 1.514, -1.621, 0.7984, 1.7309, -1.5371, 0.7571, 1.9517, -1.4453, 0.7119, 2.1752, -1.3496, 0.6647, 2.4, -1.948, 0.4634, 0.9, -1.9338, 0.4601, 1.0972, -1.894, 0.4506, 1.3023, -1.833, 0.4361, 1.514, -1.7549, 0.4175, 1.7309, -1.664, 0.3959, 1.9517, -1.5646, 0.3722, 2.1752, -1.461, 0.3476, 2.4, -2.0, 0.0, 0.9, -1.9854, 0.0, 1.0972, -1.9446, 0.0, 1.3023, -1.8819, 0.0, 1.514, -1.8017, 0.0, 1.7309, -1.7085, 0.0, 1.9517, -1.6064, 0.0, 2.1752, -1.5, 0.0, 2.4, 2.0, 0.0, 0.9, 1.9854, 0.0, 1.0972, 1.9446, 0.0, 1.3023, 1.8819, 0.0, 1.514, 1.8017, 0.0, 1.7309, 1.7085, 0.0, 1.9517, 1.6064, 0.0, 2.1752, 1.5, 0.0, 2.4, 1.948, 0.4634, 0.9, 1.9338, 0.4601, 1.0972, 1.894, 0.4506, 1.3023, 1.833, 0.4361, 1.514, 1.7549, 0.4175, 1.7309, 1.664, 0.3959, 1.9517, 1.5646, 0.3722, 2.1752, 1.461, 0.3476, 2.4, 1.7994, 0.8863, 0.9, 1.7863, 0.8798, 1.0972, 1.7496, 0.8617, 1.3023, 1.6932, 0.834, 1.514, 1.621, 0.7984, 1.7309, 1.5371, 0.7571, 1.9517, 1.4453, 0.7119, 2.1752, 1.3496, 0.6647, 2.4, 1.5655, 1.2574, 0.9, 1.5541, 1.2482, 1.0972, 1.5221, 1.2226, 1.3023, 1.4731, 1.1831, 1.514, 1.4103, 1.1327, 1.7309, 1.3373, 1.0741, 1.9517, 1.2574, 1.0099, 2.1752, 1.1741, 0.943, 2.4, 1.2574, 1.5655, 0.9, 1.2482, 1.5541, 1.0972, 1.2226, 1.5221, 1.3023, 1.1831, 1.4731, 1.514, 1.1327, 1.4103, 1.7309, 1.0741, 1.3373, 1.9517, 1.0099, 1.2574, 2.1752, 0.943, 1.1741, 2.4, 0.8863, 1.7994, 0.9, 0.8798, 1.7863, 1.0972, 0.8617, 1.7496, 1.3023, 0.834, 1.6932, 1.514, 0.7984, 1.621, 1.7309, 0.7571, 1.5371, 1.9517, 0.7119, 1.4453, 2.1752, 0.6647, 1.3496, 2.4, 0.4634, 1.948, 0.9, 0.4601, 1.9338, 1.0972, 0.4506, 1.894, 1.3023, 0.4361, 1.833, 1.514, 0.4175, 1.7549, 1.7309, 0.3959, 1.664, 1.9517, 0.3722, 1.5646, 2.1752, 0.3476, 1.461, 2.4, 0.0, 2.0, 0.9, 0.0, 1.9854, 1.0972, 0.0, 1.9446, 1.3023, 0.0, 1.8819, 1.514, 0.0, 1.8017, 1.7309, 0.0, 1.7085, 1.9517, 0.0, 1.6064, 2.1752, 0.0, 1.5, 2.4, 0.0, -1.5, 0.15, 0.0, -1.5277, 0.1915, 0.0, -1.5991, 0.2528, 0.0, -1.6968, 0.335, 0.0, -1.8032, 0.4395, 0.0, -1.9009, 0.5676, 0.0, -1.9723, 0.7207, 0.0, -2.0, 0.9, 0.3476, -1.461, 0.15, 0.354, -1.488, 0.1915, 0.3705, -1.5575, 0.2528, 0.3932, -1.6527, 0.335, 0.4178, -1.7563, 0.4395, 0.4405, -1.8514, 0.5676, 0.457, -1.921, 0.7207, 0.4634, -1.948, 0.9, 0.6647, -1.3496, 0.15, 0.677, -1.3745, 0.1915, 0.7087, -1.4387, 0.2528, 0.7519, -1.5266, 0.335, 0.7991, -1.6224, 0.4395, 0.8424, -1.7102, 0.5676, 0.874, -1.7745, 0.7207, 0.8863, -1.7994, 0.9, 0.943, -1.1741, 0.15, 0.9604, -1.1958, 0.1915, 1.0054, -1.2517, 0.2528, 1.0668, -1.3281, 0.335, 1.1337, -1.4114, 0.4395, 1.1951, -1.4879, 0.5676, 1.24, -1.5438, 0.7207, 1.2574, -1.5655, 0.9, 1.1741, -0.943, 0.15, 1.1958, -0.9604, 0.1915, 1.2517, -1.0054, 0.2528, 1.3281, -1.0668, 0.335, 1.4114, -1.1337, 0.4395, 1.4879, -1.1951, 0.5676, 1.5438, -1.24, 0.7207, 1.5655, -1.2574, 0.9, 1.3496, -0.6647, 0.15, 1.3745, -0.677, 0.1915, 1.4387, -0.7087, 0.2528, 1.5266, -0.7519, 0.335, 1.6224, -0.7991, 0.4395, 1.7102, -0.8424, 0.5676, 1.7745, -0.874, 0.7207, 1.7994, -0.8863, 0.9, 1.461, -0.3476, 0.15, 1.488, -0.354, 0.1915, 1.5575, -0.3705, 0.2528, 1.6527, -0.3932, 0.335, 1.7563, -0.4178, 0.4395, 1.8514, -0.4405, 0.5676, 1.921, -0.457, 0.7207, 1.948, -0.4634, 0.9, 1.5, 0.0, 0.15, 1.5277, 0.0, 0.1915, 1.5991, 0.0, 0.2528, 1.6968, 0.0, 0.335, 1.8032, 0.0, 0.4395, 1.9009, 0.0, 0.5676, 1.9723, 0.0, 0.7207, 2.0, 0.0, 0.9, -1.5, 0.0, 0.15, -1.5277, 0.0, 0.1915, -1.5991, 0.0, 0.2528, -1.6968, 0.0, 0.335, -1.8032, 0.0, 0.4395, -1.9009, 0.0, 0.5676, -1.9723, 0.0, 0.7207, -2.0, 0.0, 0.9, -1.461, -0.3476, 0.15, -1.488, -0.354, 0.1915, -1.5575, -0.3705, 0.2528, -1.6527, -0.3932, 0.335, -1.7563, -0.4178, 0.4395, -1.8514, -0.4405, 0.5676, -1.921, -0.457, 0.7207, -1.948, -0.4634, 0.9, -1.3496, -0.6647, 0.15, -1.3745, -0.677, 0.1915, -1.4387, -0.7087, 0.2528, -1.5266, -0.7519, 0.335, -1.6224, -0.7991, 0.4395, -1.7102, -0.8424, 0.5676, -1.7745, -0.874, 0.7207, -1.7994, -0.8863, 0.9, -1.1741, -0.943, 0.15, -1.1958, -0.9604, 0.1915, -1.2517, -1.0054, 0.2528, -1.3281, -1.0668, 0.335, -1.4114, -1.1337, 0.4395, -1.4879, -1.1951, 0.5676, -1.5438, -1.24, 0.7207, -1.5655, -1.2574, 0.9, -0.943, -1.1741, 0.15, -0.9604, -1.1958, 0.1915, -1.0054, -1.2517, 0.2528, -1.0668, -1.3281, 0.335, -1.1337, -1.4114, 0.4395, -1.1951, -1.4879, 0.5676, -1.24, -1.5438, 0.7207, -1.2574, -1.5655, 0.9, -0.6647, -1.3496, 0.15, -0.677, -1.3745, 0.1915, -0.7087, -1.4387, 0.2528, -0.7519, -1.5266, 0.335, -0.7991, -1.6224, 0.4395, -0.8424, -1.7102, 0.5676, -0.874, -1.7745, 0.7207, -0.8863, -1.7994, 0.9, -0.3476, -1.461, 0.15, -0.354, -1.488, 0.1915, -0.3705, -1.5575, 0.2528, -0.3932, -1.6527, 0.335, -0.4178, -1.7563, 0.4395, -0.4405, -1.8514, 0.5676, -0.457, -1.921, 0.7207, -0.4634, -1.948, 0.9, 0.0, -1.5, 0.15, 0.0, -1.5277, 0.1915, 0.0, -1.5991, 0.2528, 0.0, -1.6968, 0.335, 0.0, -1.8032, 0.4395, 0.0, -1.9009, 0.5676, 0.0, -1.9723, 0.7207, 0.0, -2.0, 0.9, 0.0, 1.5, 0.15, 0.0, 1.5277, 0.1915, 0.0, 1.5991, 0.2528, 0.0, 1.6968, 0.335, 0.0, 1.8032, 0.4395, 0.0, 1.9009, 0.5676, 0.0, 1.9723, 0.7207, 0.0, 2.0, 0.9, -0.3476, 1.461, 0.15, -0.354, 1.488, 0.1915, -0.3705, 1.5575, 0.2528, -0.3932, 1.6527, 0.335, -0.4178, 1.7563, 0.4395, -0.4405, 1.8514, 0.5676, -0.457, 1.921, 0.7207, -0.4634, 1.948, 0.9, -0.6647, 1.3496, 0.15, -0.677, 1.3745, 0.1915, -0.7087, 1.4387, 0.2528, -0.7519, 1.5266, 0.335, -0.7991, 1.6224, 0.4395, -0.8424, 1.7102, 0.5676, -0.874, 1.7745, 0.7207, -0.8863, 1.7994, 0.9, -0.943, 1.1741, 0.15, -0.9604, 1.1958, 0.1915, -1.0054, 1.2517, 0.2528, -1.0668, 1.3281, 0.335, -1.1337, 1.4114, 0.4395, -1.1951, 1.4879, 0.5676, -1.24, 1.5438, 0.7207, -1.2574, 1.5655, 0.9, -1.1741, 0.943, 0.15, -1.1958, 0.9604, 0.1915, -1.2517, 1.0054, 0.2528, -1.3281, 1.0668, 0.335, -1.4114, 1.1337, 0.4395, -1.4879, 1.1951, 0.5676, -1.5438, 1.24, 0.7207, -1.5655, 1.2574, 0.9, -1.3496, 0.6647, 0.15, -1.3745, 0.677, 0.1915, -1.4387, 0.7087, 0.2528, -1.5266, 0.7519, 0.335, -1.6224, 0.7991, 0.4395, -1.7102, 0.8424, 0.5676, -1.7745, 0.874, 0.7207, -1.7994, 0.8863, 0.9, -1.461, 0.3476, 0.15, -1.488, 0.354, 0.1915, -1.5575, 0.3705, 0.2528, -1.6527, 0.3932, 0.335, -1.7563, 0.4178, 0.4395, -1.8514, 0.4405, 0.5676, -1.921, 0.457, 0.7207, -1.948, 0.4634, 0.9, -1.5, 0.0, 0.15, -1.5277, 0.0, 0.1915, -1.5991, 0.0, 0.2528, -1.6968, 0.0, 0.335, -1.8032, 0.0, 0.4395, -1.9009, 0.0, 0.5676, -1.9723, 0.0, 0.7207, -2.0, 0.0, 0.9, 1.5, 0.0, 0.15, 1.5277, 0.0, 0.1915, 1.5991, 0.0, 0.2528, 1.6968, 0.0, 0.335, 1.8032, 0.0, 0.4395, 1.9009, 0.0, 0.5676, 1.9723, 0.0, 0.7207, 2.0, 0.0, 0.9, 1.461, 0.3476, 0.15, 1.488, 0.354, 0.1915, 1.5575, 0.3705, 0.2528, 1.6527, 0.3932, 0.335, 1.7563, 0.4178, 0.4395, 1.8514, 0.4405, 0.5676, 1.921, 0.457, 0.7207, 1.948, 0.4634, 0.9, 1.3496, 0.6647, 0.15, 1.3745, 0.677, 0.1915, 1.4387, 0.7087, 0.2528, 1.5266, 0.7519, 0.335, 1.6224, 0.7991, 0.4395, 1.7102, 0.8424, 0.5676, 1.7745, 0.874, 0.7207, 1.7994, 0.8863, 0.9, 1.1741, 0.943, 0.15, 1.1958, 0.9604, 0.1915, 1.2517, 1.0054, 0.2528, 1.3281, 1.0668, 0.335, 1.4114, 1.1337, 0.4395, 1.4879, 1.1951, 0.5676, 1.5438, 1.24, 0.7207, 1.5655, 1.2574, 0.9, 0.943, 1.1741, 0.15, 0.9604, 1.1958, 0.1915, 1.0054, 1.2517, 0.2528, 1.0668, 1.3281, 0.335, 1.1337, 1.4114, 0.4395, 1.1951, 1.4879, 0.5676, 1.24, 1.5438, 0.7207, 1.2574, 1.5655, 0.9, 0.6647, 1.3496, 0.15, 0.677, 1.3745, 0.1915, 0.7087, 1.4387, 0.2528, 0.7519, 1.5266, 0.335, 0.7991, 1.6224, 0.4395, 0.8424, 1.7102, 0.5676, 0.874, 1.7745, 0.7207, 0.8863, 1.7994, 0.9, 0.3476, 1.461, 0.15, 0.354, 1.488, 0.1915, 0.3705, 1.5575, 0.2528, 0.3932, 1.6527, 0.335, 0.4178, 1.7563, 0.4395, 0.4405, 1.8514, 0.5676, 0.457, 1.921, 0.7207, 0.4634, 1.948, 0.9, 0.0, 1.5, 0.15, 0.0, 1.5277, 0.1915, 0.0, 1.5991, 0.2528, 0.0, 1.6968, 0.335, 0.0, 1.8032, 0.4395, 0.0, 1.9009, 0.5676, 0.0, 1.9723, 0.7207, 0.0, 2.0, 0.9, -3.0, 0.0, 1.8, -2.9694, 0.0, 1.9666, -2.8776, 0.0, 2.086, -2.7245, 0.0, 2.166, -2.5102, 0.0, 2.2146, -2.2347, 0.0, 2.2395, -1.898, 0.0, 2.2487, -1.5, 0.0, 2.25, -2.9834, -0.1102, 1.8, -2.9531, -0.1102, 1.962, -2.8624, -0.1102, 2.0781, -2.7114, -0.1102, 2.1559, -2.5, -0.1102, 2.2031, -2.2286, -0.1102, 2.2273, -1.897, -0.1102, 2.2363, -1.5055, -0.1102, 2.2375, -2.9405, -0.1837, 1.8, -2.9112, -0.1837, 1.9501, -2.8234, -0.1837, 2.0577, -2.6775, -0.1837, 2.1298, -2.4738, -0.1837, 2.1735, -2.2128, -0.1837, 2.1959, -1.8947, -0.1837, 2.2042, -1.5198, -0.1837, 2.2054, -2.8819, -0.2204, 1.8, -2.8538, -0.2204, 1.9338, -2.77, -0.2204, 2.0297, -2.6312, -0.2204, 2.094, -2.438, -0.2204, 2.133, -2.1912, -0.2204, 2.153, -1.8914, -0.2204, 2.1604, -1.5394, -0.2204, 2.1614, -2.8181, -0.2204, 1.8, -2.7914, -0.2204, 1.9161, -2.7119, -0.2204, 1.9993, -2.5808, -0.2204, 2.0551, -2.399, -0.2204, 2.0889, -2.1677, -0.2204, 2.1062, -1.8879, -0.2204, 2.1126, -1.5606, -0.2204, 2.1136, -2.7595, -0.1837, 1.8, -2.734, -0.1837, 1.8998, -2.6585, -0.1837, 1.9714, -2.5345, -0.1837, 2.0193, -2.3632, -0.1837, 2.0484, -2.1461, -0.1837, 2.0633, -1.8846, -0.1837, 2.0688, -1.5802, -0.1837, 2.0696, -2.7166, -0.1102, 1.8, -2.6921, -0.1102, 1.8879, -2.6195, -0.1102, 1.9509, -2.5006, -0.1102, 1.9932, -2.337, -0.1102, 2.0188, -2.1303, -0.1102, 2.0319, -1.8823, -0.1102, 2.0368, -1.5945, -0.1102, 2.0375, -2.7, 0.0, 1.8, -2.6758, 0.0, 1.8833, -2.6044, 0.0, 1.943, -2.4875, 0.0, 1.983, -2.3268, 0.0, 2.0073, -2.1242, 0.0, 2.0198, -1.8813, 0.0, 2.0243, -1.6, 0.0, 2.025, -2.7, 0.0, 1.8, -2.6758, 0.0, 1.8833, -2.6044, 0.0, 1.943, -2.4875, 0.0, 1.983, -2.3268, 0.0, 2.0073, -2.1242, 0.0, 2.0198, -1.8813, 0.0, 2.0243, -1.6, 0.0, 2.025, -2.7166, 0.1102, 1.8, -2.6921, 0.1102, 1.8879, -2.6195, 0.1102, 1.9509, -2.5006, 0.1102, 1.9932, -2.337, 0.1102, 2.0188, -2.1303, 0.1102, 2.0319, -1.8823, 0.1102, 2.0368, -1.5945, 0.1102, 2.0375, -2.7595, 0.1837, 1.8, -2.734, 0.1837, 1.8998, -2.6585, 0.1837, 1.9714, -2.5345, 0.1837, 2.0193, -2.3632, 0.1837, 2.0484, -2.1461, 0.1837, 2.0633, -1.8846, 0.1837, 2.0688, -1.5802, 0.1837, 2.0696, -2.8181, 0.2204, 1.8, -2.7914, 0.2204, 1.9161, -2.7119, 0.2204, 1.9993, -2.5808, 0.2204, 2.0551, -2.399, 0.2204, 2.0889, -2.1677, 0.2204, 2.1062, -1.8879, 0.2204, 2.1126, -1.5606, 0.2204, 2.1136, -2.8819, 0.2204, 1.8, -2.8538, 0.2204, 1.9338, -2.77, 0.2204, 2.0297, -2.6312, 0.2204, 2.094, -2.438, 0.2204, 2.133, -2.1912, 0.2204, 2.153, -1.8914, 0.2204, 2.1604, -1.5394, 0.2204, 2.1614, -2.9405, 0.1837, 1.8, -2.9112, 0.1837, 1.9501, -2.8234, 0.1837, 2.0577, -2.6775, 0.1837, 2.1298, -2.4738, 0.1837, 2.1735, -2.2128, 0.1837, 2.1959, -1.8947, 0.1837, 2.2042, -1.5198, 0.1837, 2.2054, -2.9834, 0.1102, 1.8, -2.9531, 0.1102, 1.962, -2.8624, 0.1102, 2.0781, -2.7114, 0.1102, 2.1559, -2.5, 0.1102, 2.2031, -2.2286, 0.1102, 2.2273, -1.897, 0.1102, 2.2363, -1.5055, 0.1102, 2.2375, -3.0, 0.0, 1.8, -2.9694, 0.0, 1.9666, -2.8776, 0.0, 2.086, -2.7245, 0.0, 2.166, -2.5102, 0.0, 2.2146, -2.2347, 0.0, 2.2395, -1.898, 0.0, 2.2487, -1.5, 0.0, 2.25, -1.9, 0.0, 0.6, -2.1971, 0.0, 0.7491, -2.4461, 0.0, 0.9068, -2.6478, 0.0, 1.0723, -2.8032, 0.0, 1.245, -2.9131, 0.0, 1.4243, -2.9784, 0.0, 1.6095, -3.0, 0.0, 1.8, -1.9055, -0.1102, 0.6166, -2.197, -0.1102, 0.7635, -2.4412, -0.1102, 0.9196, -2.6388, -0.1102, 1.0837, -2.7909, -0.1102, 1.2549, -2.8985, -0.1102, 1.432, -2.9623, -0.1102, 1.6141, -2.9834, -0.1102, 1.8, -1.9198, -0.1837, 0.6595, -2.1969, -0.1837, 0.8006, -2.4285, -0.1837, 0.9525, -2.6156, -0.1837, 1.1131, -2.7593, -0.1837, 1.2802, -2.8607, -0.1837, 1.4517, -2.9207, -0.1837, 1.6257, -2.9405, -0.1837, 1.8, -1.9394, -0.2204, 0.7181, -2.1967, -0.2204, 0.8514, -2.4112, -0.2204, 0.9976, -2.5839, -0.2204, 1.1532, -2.7161, -0.2204, 1.3148, -2.809, -0.2204, 1.4787, -2.8639, -0.2204, 1.6416, -2.8819, -0.2204, 1.8, -1.9606, -0.2204, 0.7819, -2.1966, -0.2204, 0.9067, -2.3923, -0.2204, 1.0467, -2.5493, -0.2204, 1.1969, -2.669, -0.2204, 1.3524, -2.7528, -0.2204, 1.5081, -2.802, -0.2204, 1.659, -2.8181, -0.2204, 1.8, -1.9802, -0.1837, 0.8405, -2.1964, -0.1837, 0.9574, -2.375, -0.1837, 1.0917, -2.5176, -0.1837, 1.2371, -2.6258, -0.1837, 1.387, -2.7011, -0.1837, 1.5351, -2.7451, -0.1837, 1.6749, -2.7595, -0.1837, 1.8, -1.9945, -0.1102, 0.8834, -2.1963, -0.1102, 0.9945, -2.3623, -0.1102, 1.1247, -2.4944, -0.1102, 1.2665, -2.5942, -0.1102, 1.4123, -2.6633, -0.1102, 1.5549, -2.7036, -0.1102, 1.6866, -2.7166, -0.1102, 1.8, -2.0, 0.0, 0.9, -2.1962, 0.0, 1.0089, -2.3574, 0.0, 1.1375, -2.4854, 0.0, 1.2778, -2.5819, 0.0, 1.4222, -2.6487, 0.0, 1.5625, -2.6875, 0.0, 1.6911, -2.7, 0.0, 1.8, -2.0, 0.0, 0.9, -2.1962, 0.0, 1.0089, -2.3574, 0.0, 1.1375, -2.4854, 0.0, 1.2778, -2.5819, 0.0, 1.4222, -2.6487, 0.0, 1.5625, -2.6875, 0.0, 1.6911, -2.7, 0.0, 1.8, -1.9945, 0.1102, 0.8834, -2.1963, 0.1102, 0.9945, -2.3623, 0.1102, 1.1247, -2.4944, 0.1102, 1.2665, -2.5942, 0.1102, 1.4123, -2.6633, 0.1102, 1.5549, -2.7036, 0.1102, 1.6866, -2.7166, 0.1102, 1.8, -1.9802, 0.1837, 0.8405, -2.1964, 0.1837, 0.9574, -2.375, 0.1837, 1.0917, -2.5176, 0.1837, 1.2371, -2.6258, 0.1837, 1.387, -2.7011, 0.1837, 1.5351, -2.7451, 0.1837, 1.6749, -2.7595, 0.1837, 1.8, -1.9606, 0.2204, 0.7819, -2.1966, 0.2204, 0.9067, -2.3923, 0.2204, 1.0467, -2.5493, 0.2204, 1.1969, -2.669, 0.2204, 1.3524, -2.7528, 0.2204, 1.5081, -2.802, 0.2204, 1.659, -2.8181, 0.2204, 1.8, -1.9394, 0.2204, 0.7181, -2.1967, 0.2204, 0.8514, -2.4112, 0.2204, 0.9976, -2.5839, 0.2204, 1.1532, -2.7161, 0.2204, 1.3148, -2.809, 0.2204, 1.4787, -2.8639, 0.2204, 1.6416, -2.8819, 0.2204, 1.8, -1.9198, 0.1837, 0.6595, -2.1969, 0.1837, 0.8006, -2.4285, 0.1837, 0.9525, -2.6156, 0.1837, 1.1131, -2.7593, 0.1837, 1.2802, -2.8607, 0.1837, 1.4517, -2.9207, 0.1837, 1.6257, -2.9405, 0.1837, 1.8, -1.9055, 0.1102, 0.6166, -2.197, 0.1102, 0.7635, -2.4412, 0.1102, 0.9196, -2.6388, 0.1102, 1.0837, -2.7909, 0.1102, 1.2549, -2.8985, 0.1102, 1.432, -2.9623, 0.1102, 1.6141, -2.9834, 0.1102, 1.8, -1.9, 0.0, 0.6, -2.1971, 0.0, 0.7491, -2.4461, 0.0, 0.9068, -2.6478, 0.0, 1.0723, -2.8032, 0.0, 1.245, -2.9131, 0.0, 1.4243, -2.9784, 0.0, 1.6095, -3.0, 0.0, 1.8, 3.3, 0.0, 2.4, 3.0015, 0.0, 2.194, 2.8341, 0.0, 1.9185, 2.7332, 0.0, 1.605, 2.6341, 0.0, 1.2848, 2.472, 0.0, 0.9897, 2.1822, 0.0, 0.7509, 1.7, 0.0, 0.6, 3.2668, -0.0918, 2.4, 2.9773, -0.1002, 2.1972, 2.8147, -0.1217, 1.9272, 2.716, -0.1511, 1.6208, 2.6181, -0.1832, 1.3086, 2.4582, -0.2126, 1.0216, 2.1731, -0.2341, 0.7903, 1.7, -0.2424, 0.6457, 3.181, -0.1531, 2.4, 2.9151, -0.167, 2.2054, 2.7648, -0.2028, 1.9496, 2.6715, -0.2519, 1.6615, 2.5769, -0.3053, 1.37, 2.4224, -0.3543, 1.1039, 2.1496, -0.3902, 0.8921, 1.7, -0.4041, 0.7636, 3.0638, -0.1837, 2.4, 2.83, -0.2004, 2.2167, 2.6964, -0.2434, 1.9803, 2.6107, -0.3022, 1.7173, 2.5205, -0.3663, 1.4539, 2.3736, -0.4252, 1.2164, 2.1175, -0.4682, 1.0313, 1.7, -0.4849, 0.9247, 2.9362, -0.1837, 2.4, 2.7373, -0.2004, 2.2289, 2.622, -0.2434, 2.0137, 2.5444, -0.3022, 1.778, 2.4591, -0.3663, 1.5453, 2.3203, -0.4252, 1.339, 2.0825, -0.4682, 1.1829, 1.7, -0.4849, 1.1003, 2.819, -0.1531, 2.4, 2.6522, -0.167, 2.2401, 2.5536, -0.2028, 2.0444, 2.4836, -0.2519, 1.8337, 2.4027, -0.3053, 1.6291, 2.2715, -0.3543, 1.4516, 2.0504, -0.3902, 1.322, 1.7, -0.4041, 1.2614, 2.7332, -0.0918, 2.4, 2.59, -0.1002, 2.2483, 2.5036, -0.1217, 2.0668, 2.4391, -0.1511, 1.8745, 2.3615, -0.1832, 1.6905, 2.2357, -0.2126, 1.5339, 2.0269, -0.2341, 1.4238, 1.7, -0.2424, 1.3793, 2.7, 0.0, 2.4, 2.5659, 0.0, 2.2515, 2.4843, 0.0, 2.0755, 2.4219, 0.0, 1.8903, 2.3455, 0.0, 1.7143, 2.2219, 0.0, 1.5658, 2.0178, 0.0, 1.4633, 1.7, 0.0, 1.425, 2.7, 0.0, 2.4, 2.5659, 0.0, 2.2515, 2.4843, 0.0, 2.0755, 2.4219, 0.0, 1.8903, 2.3455, 0.0, 1.7143, 2.2219, 0.0, 1.5658, 2.0178, 0.0, 1.4633, 1.7, 0.0, 1.425, 2.7332, 0.0918, 2.4, 2.59, 0.1002, 2.2483, 2.5036, 0.1217, 2.0668, 2.4391, 0.1511, 1.8745, 2.3615, 0.1832, 1.6905, 2.2357, 0.2126, 1.5339, 2.0269, 0.2341, 1.4238, 1.7, 0.2424, 1.3793, 2.819, 0.1531, 2.4, 2.6522, 0.167, 2.2401, 2.5536, 0.2028, 2.0444, 2.4836, 0.2519, 1.8337, 2.4027, 0.3053, 1.6291, 2.2715, 0.3543, 1.4516, 2.0504, 0.3902, 1.322, 1.7, 0.4041, 1.2614, 2.9362, 0.1837, 2.4, 2.7373, 0.2004, 2.2289, 2.622, 0.2434, 2.0137, 2.5444, 0.3022, 1.778, 2.4591, 0.3663, 1.5453, 2.3203, 0.4252, 1.339, 2.0825, 0.4682, 1.1829, 1.7, 0.4849, 1.1003, 3.0638, 0.1837, 2.4, 2.83, 0.2004, 2.2167, 2.6964, 0.2434, 1.9803, 2.6107, 0.3022, 1.7173, 2.5205, 0.3663, 1.4539, 2.3736, 0.4252, 1.2164, 2.1175, 0.4682, 1.0313, 1.7, 0.4849, 0.9247, 3.181, 0.1531, 2.4, 2.9151, 0.167, 2.2054, 2.7648, 0.2028, 1.9496, 2.6715, 0.2519, 1.6615, 2.5769, 0.3053, 1.37, 2.4224, 0.3543, 1.1039, 2.1496, 0.3902, 0.8921, 1.7, 0.4041, 0.7636, 3.2668, 0.0918, 2.4, 2.9773, 0.1002, 2.1972, 2.8147, 0.1217, 1.9272, 2.716, 0.1511, 1.6208, 2.6181, 0.1832, 1.3086, 2.4582, 0.2126, 1.0216, 2.1731, 0.2341, 0.7903, 1.7, 0.2424, 0.6457, 3.3, 0.0, 2.4, 3.0015, 0.0, 2.194, 2.8341, 0.0, 1.9185, 2.7332, 0.0, 1.605, 2.6341, 0.0, 1.2848, 2.472, 0.0, 0.9897, 2.1822, 0.0, 0.7509, 1.7, 0.0, 0.6, 3.2, 0.0, 2.4, 3.2961, 0.0, 2.4403, 3.3685, 0.0, 2.4656, 3.4152, 0.0, 2.4767, 3.4338, 0.0, 2.4748, 3.4223, 0.0, 2.4607, 3.3784, 0.0, 2.4354, 3.3, 0.0, 2.4, 3.1778, -0.0551, 2.4, 3.2703, -0.0571, 2.4396, 3.3393, -0.0624, 2.4645, 3.383, -0.0696, 2.4756, 3.3994, -0.0774, 2.4737, 3.3868, -0.0846, 2.4599, 3.3432, -0.0898, 2.435, 3.2668, -0.0918, 2.4, 3.1207, -0.0918, 2.4, 3.2039, -0.0952, 2.4378, 3.264, -0.104, 2.4617, 3.3, -0.1159, 2.4725, 3.3107, -0.129, 2.4709, 3.2952, -0.1409, 2.4578, 3.2523, -0.1497, 2.4339, 3.181, -0.1531, 2.4, 3.0426, -0.1102, 2.4, 3.1131, -0.1143, 2.4353, 3.161, -0.1248, 2.4579, 3.1865, -0.1391, 2.4682, 3.1894, -0.1548, 2.467, 3.1699, -0.1691, 2.4549, 3.128, -0.1796, 2.4323, 3.0638, -0.1837, 2.4, 2.9574, -0.1102, 2.4, 3.0142, -0.1143, 2.4326, 3.0489, -0.1248, 2.4537, 3.0628, -0.1391, 2.4636, 3.0572, -0.1548, 2.4628, 3.0334, -0.1691, 2.4517, 2.9927, -0.1796, 2.4306, 2.9362, -0.1837, 2.4, 2.8793, -0.0918, 2.4, 2.9234, -0.0952, 2.4301, 2.9459, -0.104, 2.4498, 2.9493, -0.1159, 2.4594, 2.9359, -0.129, 2.459, 2.9082, -0.1409, 2.4488, 2.8684, -0.1497, 2.4291, 2.819, -0.1531, 2.4, 2.8222, -0.0551, 2.4, 2.8569, -0.0571, 2.4283, 2.8706, -0.0624, 2.447, 2.8663, -0.0696, 2.4563, 2.8472, -0.0774, 2.4562, 2.8166, -0.0846, 2.4467, 2.7775, -0.0898, 2.428, 2.7332, -0.0918, 2.4, 2.8, 0.0, 2.4, 2.8312, 0.0, 2.4276, 2.8414, 0.0, 2.4459, 2.8341, 0.0, 2.4551, 2.8128, 0.0, 2.4551, 2.781, 0.0, 2.4459, 2.7423, 0.0, 2.4276, 2.7, 0.0, 2.4, 2.8, 0.0, 2.4, 2.8312, 0.0, 2.4276, 2.8414, 0.0, 2.4459, 2.8341, 0.0, 2.4551, 2.8128, 0.0, 2.4551, 2.781, 0.0, 2.4459, 2.7423, 0.0, 2.4276, 2.7, 0.0, 2.4, 2.8222, 0.0551, 2.4, 2.8569, 0.0571, 2.4283, 2.8706, 0.0624, 2.447, 2.8663, 0.0696, 2.4563, 2.8472, 0.0774, 2.4562, 2.8166, 0.0846, 2.4467, 2.7775, 0.0898, 2.428, 2.7332, 0.0918, 2.4, 2.8793, 0.0918, 2.4, 2.9234, 0.0952, 2.4301, 2.9459, 0.104, 2.4498, 2.9493, 0.1159, 2.4594, 2.9359, 0.129, 2.459, 2.9082, 0.1409, 2.4488, 2.8684, 0.1497, 2.4291, 2.819, 0.1531, 2.4, 2.9574, 0.1102, 2.4, 3.0142, 0.1143, 2.4326, 3.0489, 0.1248, 2.4537, 3.0628, 0.1391, 2.4636, 3.0572, 0.1548, 2.4628, 3.0334, 0.1691, 2.4517, 2.9927, 0.1796, 2.4306, 2.9362, 0.1837, 2.4, 3.0426, 0.1102, 2.4, 3.1131, 0.1143, 2.4353, 3.161, 0.1248, 2.4579, 3.1865, 0.1391, 2.4682, 3.1894, 0.1548, 2.467, 3.1699, 0.1691, 2.4549, 3.128, 0.1796, 2.4323, 3.0638, 0.1837, 2.4, 3.1207, 0.0918, 2.4, 3.2039, 0.0952, 2.4378, 3.264, 0.104, 2.4617, 3.3, 0.1159, 2.4725, 3.3107, 0.129, 2.4709, 3.2952, 0.1409, 2.4578, 3.2523, 0.1497, 2.4339, 3.181, 0.1531, 2.4, 3.1778, 0.0551, 2.4, 3.2703, 0.0571, 2.4396, 3.3393, 0.0624, 2.4645, 3.383, 0.0696, 2.4756, 3.3994, 0.0774, 2.4737, 3.3868, 0.0846, 2.4599, 3.3432, 0.0898, 2.435, 3.2668, 0.0918, 2.4, 3.2, 0.0, 2.4, 3.2961, 0.0, 2.4403, 3.3685, 0.0, 2.4656, 3.4152, 0.0, 2.4767, 3.4338, 0.0, 2.4748, 3.4223, 0.0, 2.4607, 3.3784, 0.0, 2.4354, 3.3, 0.0, 2.4, 0.0, 1.5, 0.15, 0.0, 1.4917, 0.1181, 0.0, 1.4519, 0.0875, 0.0, 1.3583, 0.0595, 0.0, 1.1886, 0.0354, 0.0, 0.9206, 0.0166, 0.0, 0.5318, 0.0044, 0.0, 0.0, 0.0, 0.3476, 1.461, 0.15, 0.3447, 1.4529, 0.1181, 0.3351, 1.4141, 0.0875, 0.3134, 1.323, 0.0595, 0.2744, 1.1577, 0.0354, 0.2128, 0.8966, 0.0166, 0.1231, 0.5179, 0.0044, 0.0, 0.0, 0.0, 0.6647, 1.3496, 0.15, 0.6597, 1.3421, 0.1181, 0.6415, 1.3063, 0.0875, 0.6001, 1.2221, 0.0595, 0.5254, 1.0694, 0.0354, 0.4072, 0.8282, 0.0166, 0.2354, 0.4784, 0.0044, 0.0, 0.0, 0.0, 0.943, 1.1741, 0.15, 0.9365, 1.1676, 0.1181, 0.911, 1.1365, 0.0875, 0.8522, 1.0632, 0.0595, 0.746, 0.9304, 0.0354, 0.578, 0.7206, 0.0166, 0.3341, 0.4162, 0.0044, 0.0, 0.0, 0.0, 1.1741, 0.943, 0.15, 1.1666, 0.9378, 0.1181, 1.1351, 0.9128, 0.0875, 1.0619, 0.854, 0.0595, 0.9294, 0.7473, 0.0354, 0.72, 0.5787, 0.0166, 0.4161, 0.3343, 0.0044, 0.0, 0.0, 0.0, 1.3496, 0.6647, 0.15, 1.3415, 0.661, 0.1181, 1.3055, 0.6434, 0.0875, 1.2213, 0.6019, 0.0595, 1.0689, 0.5267, 0.0354, 0.8279, 0.4079, 0.0166, 0.4784, 0.2357, 0.0044, 0.0, 0.0, 0.0, 1.461, 0.3476, 0.15, 1.4527, 0.3457, 0.1181, 1.4139, 0.3364, 0.0875, 1.3228, 0.3147, 0.0595, 1.1576, 0.2754, 0.0354, 0.8965, 0.2133, 0.0166, 0.5179, 0.1232, 0.0044, 0.0, 0.0, 0.0, 1.5, 0.0, 0.15, 1.4917, 0.0, 0.1181, 1.4519, 0.0, 0.0875, 1.3583, 0.0, 0.0595, 1.1886, 0.0, 0.0354, 0.9206, 0.0, 0.0166, 0.5318, 0.0, 0.0044, 0.0, 0.0, 0.0, -1.5, 0.0, 0.15, -1.4917, 0.0, 0.1181, -1.4519, 0.0, 0.0875, -1.3583, 0.0, 0.0595, -1.1886, 0.0, 0.0354, -0.9206, 0.0, 0.0166, -0.5318, 0.0, 0.0044, 0.0, 0.0, 0.0, -1.461, 0.3476, 0.15, -1.4529, 0.3457, 0.1181, -1.4141, 0.3364, 0.0875, -1.323, 0.3147, 0.0595, -1.1577, 0.2754, 0.0354, -0.8966, 0.2133, 0.0166, -0.5179, 0.1232, 0.0044, 0.0, 0.0, 0.0, -1.3496, 0.6647, 0.15, -1.3421, 0.661, 0.1181, -1.3063, 0.6434, 0.0875, -1.2221, 0.6019, 0.0595, -1.0694, 0.5267, 0.0354, -0.8282, 0.4079, 0.0166, -0.4784, 0.2357, 0.0044, 0.0, 0.0, 0.0, -1.1741, 0.943, 0.15, -1.1676, 0.9378, 0.1181, -1.1365, 0.9128, 0.0875, -1.0632, 0.854, 0.0595, -0.9304, 0.7473, 0.0354, -0.7206, 0.5787, 0.0166, -0.4162, 0.3343, 0.0044, 0.0, 0.0, 0.0, -0.943, 1.1741, 0.15, -0.9378, 1.1676, 0.1181, -0.9128, 1.1365, 0.0875, -0.854, 1.0632, 0.0595, -0.7473, 0.9304, 0.0354, -0.5787, 0.7206, 0.0166, -0.3343, 0.4162, 0.0044, 0.0, 0.0, 0.0, -0.6647, 1.3496, 0.15, -0.661, 1.3421, 0.1181, -0.6434, 1.3063, 0.0875, -0.6019, 1.2221, 0.0595, -0.5267, 1.0694, 0.0354, -0.4079, 0.8282, 0.0166, -0.2357, 0.4784, 0.0044, 0.0, 0.0, 0.0, -0.3476, 1.461, 0.15, -0.3457, 1.4529, 0.1181, -0.3364, 1.4141, 0.0875, -0.3147, 1.323, 0.0595, -0.2754, 1.1577, 0.0354, -0.2133, 0.8966, 0.0166, -0.1232, 0.5179, 0.0044, 0.0, 0.0, 0.0, 0.0, 1.5, 0.15, 0.0, 1.4917, 0.1181, 0.0, 1.4519, 0.0875, 0.0, 1.3583, 0.0595, 0.0, 1.1886, 0.0354, 0.0, 0.9206, 0.0166, 0.0, 0.5318, 0.0044, 0.0, 0.0, 0.0, 0.0, -1.5, 0.15, 0.0, -1.4917, 0.1181, 0.0, -1.4519, 0.0875, 0.0, -1.3583, 0.0595, 0.0, -1.1886, 0.0354, 0.0, -0.9206, 0.0166, 0.0, -0.5318, 0.0044, 0.0, 0.0, 0.0, -0.3476, -1.461, 0.15, -0.3457, -1.4529, 0.1181, -0.3364, -1.4141, 0.0875, -0.3147, -1.323, 0.0595, -0.2754, -1.1577, 0.0354, -0.2133, -0.8966, 0.0166, -0.1232, -0.5179, 0.0044, 0.0, 0.0, 0.0, -0.6647, -1.3496, 0.15, -0.661, -1.3421, 0.1181, -0.6434, -1.3063, 0.0875, -0.6019, -1.2221, 0.0595, -0.5267, -1.0694, 0.0354, -0.4079, -0.8282, 0.0166, -0.2357, -0.4784, 0.0044, 0.0, 0.0, 0.0, -0.943, -1.1741, 0.15, -0.9378, -1.1676, 0.1181, -0.9128, -1.1365, 0.0875, -0.854, -1.0632, 0.0595, -0.7473, -0.9304, 0.0354, -0.5787, -0.7206, 0.0166, -0.3343, -0.4162, 0.0044, 0.0, 0.0, 0.0, -1.1741, -0.943, 0.15, -1.1676, -0.9378, 0.1181, -1.1365, -0.9128, 0.0875, -1.0632, -0.854, 0.0595, -0.9304, -0.7473, 0.0354, -0.7206, -0.5787, 0.0166, -0.4162, -0.3343, 0.0044, 0.0, 0.0, 0.0, -1.3496, -0.6647, 0.15, -1.3421, -0.661, 0.1181, -1.3063, -0.6434, 0.0875, -1.2221, -0.6019, 0.0595, -1.0694, -0.5267, 0.0354, -0.8282, -0.4079, 0.0166, -0.4784, -0.2357, 0.0044, 0.0, 0.0, 0.0, -1.461, -0.3476, 0.15, -1.4529, -0.3457, 0.1181, -1.4141, -0.3364, 0.0875, -1.323, -0.3147, 0.0595, -1.1577, -0.2754, 0.0354, -0.8966, -0.2133, 0.0166, -0.5179, -0.1232, 0.0044, 0.0, 0.0, 0.0, -1.5, 0.0, 0.15, -1.4917, 0.0, 0.1181, -1.4519, 0.0, 0.0875, -1.3583, 0.0, 0.0595, -1.1886, 0.0, 0.0354, -0.9206, 0.0, 0.0166, -0.5318, 0.0, 0.0044, 0.0, 0.0, 0.0, 1.5, 0.0, 0.15, 1.4917, 0.0, 0.1181, 1.4519, 0.0, 0.0875, 1.3583, 0.0, 0.0595, 1.1886, 0.0, 0.0354, 0.9206, 0.0, 0.0166, 0.5318, 0.0, 0.0044, 0.0, 0.0, 0.0, 1.461, -0.3476, 0.15, 1.4529, -0.3457, 0.1181, 1.4141, -0.3364, 0.0875, 1.323, -0.3147, 0.0595, 1.1577, -0.2754, 0.0354, 0.8966, -0.2133, 0.0166, 0.5179, -0.1232, 0.0044, 0.0, 0.0, 0.0, 1.3496, -0.6647, 0.15, 1.3421, -0.661, 0.1181, 1.3063, -0.6434, 0.0875, 1.2221, -0.6019, 0.0595, 1.0694, -0.5267, 0.0354, 0.8282, -0.4079, 0.0166, 0.4784, -0.2357, 0.0044, 0.0, 0.0, 0.0, 1.1741, -0.943, 0.15, 1.1676, -0.9378, 0.1181, 1.1365, -0.9128, 0.0875, 1.0632, -0.854, 0.0595, 0.9304, -0.7473, 0.0354, 0.7206, -0.5787, 0.0166, 0.4162, -0.3343, 0.0044, 0.0, 0.0, 0.0, 0.943, -1.1741, 0.15, 0.9378, -1.1676, 0.1181, 0.9128, -1.1365, 0.0875, 0.854, -1.0632, 0.0595, 0.7473, -0.9304, 0.0354, 0.5787, -0.7206, 0.0166, 0.3343, -0.4162, 0.0044, 0.0, 0.0, 0.0, 0.6647, -1.3496, 0.15, 0.661, -1.3421, 0.1181, 0.6434, -1.3063, 0.0875, 0.6019, -1.2221, 0.0595, 0.5267, -1.0694, 0.0354, 0.4079, -0.8282, 0.0166, 0.2357, -0.4784, 0.0044, 0.0, 0.0, 0.0, 0.3476, -1.461, 0.15, 0.3457, -1.4529, 0.1181, 0.3364, -1.4141, 0.0875, 0.3147, -1.323, 0.0595, 0.2754, -1.1577, 0.0354, 0.2133, -0.8966, 0.0166, 0.1232, -0.5179, 0.0044, 0.0, 0.0, 0.0, 0.0, -1.5, 0.15, 0.0, -1.4917, 0.1181, 0.0, -1.4519, 0.0875, 0.0, -1.3583, 0.0595, 0.0, -1.1886, 0.0354, 0.0, -0.9206, 0.0166, 0.0, -0.5318, 0.0044, 0.0, 0.0, 0.0] ;


    vertices_length = 3;        // global variable that tells how many to take at a time

    // Now pass the list of vertices into WebGL to build the shape. We
    // do this by creating a Float32Array from the JavaScript array,
    // then use it to fill the current vertex buffer.
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
    
    // Build the element array buffer; this specifies the indices
    // into the vertex array for each face's vertices.
    Faces_Buffer = gl.createBuffer();
    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, Faces_Buffer);

    // This array defines each face as one triangle, using the
    // indices into the vertex array to specify each triangle's
    // position.

    // THESE ARE MY FACES AND THIS IS WHERE I WOULD HAVE TO MODIFY MY PROGRAM
    // This is the faces of the pyramid
   //var faces =  [3, 1, 0, 2, 3, 0, 1, 4, 0, 4, 2, 0, 1, 3, 4, 2, 4, 3] ;
   //This is for the teapot
    var faces =  [0, 8, 9, 1, 9, 10, 2, 10, 11, 3, 11, 12, 4, 12, 13, 5, 13, 14, 6, 14, 15, 8, 16, 17, 9, 17, 18, 10, 18, 19, 11, 19, 20, 12, 20, 21, 13, 21, 22, 14, 22, 23, 16, 24, 25, 17, 25, 26, 18, 26, 27, 19, 27, 28, 20, 28, 29, 21, 29, 30, 22, 30, 31, 24, 32, 33, 25, 33, 34, 26, 34, 35, 27, 35, 36, 28, 36, 37, 29, 37, 38, 30, 38, 39, 32, 40, 41, 33, 41, 42, 34, 42, 43, 35, 43, 44, 36, 44, 45, 37, 45, 46, 38, 46, 47, 40, 48, 49, 41, 49, 50, 42, 50, 51, 43, 51, 52, 44, 52, 53, 45, 53, 54, 46, 54, 55, 48, 56, 57, 49, 57, 58, 50, 58, 59, 51, 59, 60, 52, 60, 61, 53, 61, 62, 54, 62, 63, 64, 72, 73, 65, 73, 74, 66, 74, 75, 67, 75, 76, 68, 76, 77, 69, 77, 78, 70, 78, 79, 72, 80, 81, 73, 81, 82, 74, 82, 83, 75, 83, 84, 76, 84, 85, 77, 85, 86, 78, 86, 87, 80, 88, 89, 81, 89, 90, 82, 90, 91, 83, 91, 92, 84, 92, 93, 85, 93, 94, 86, 94, 95, 88, 96, 97, 89, 97, 98, 90, 98, 99, 91, 99, 100, 92, 100, 101, 93, 101, 102, 94, 102, 103, 96, 104, 105, 97, 105, 106, 98, 106, 107, 99, 107, 108, 100, 108, 109, 101, 109, 110, 102, 110, 111, 104, 112, 113, 105, 113, 114, 106, 114, 115, 107, 115, 116, 108, 116, 117, 109, 117, 118, 110, 118, 119, 112, 120, 121, 113, 121, 122, 114, 122, 123, 115, 123, 124, 116, 124, 125, 117, 125, 126, 118, 126, 127, 128, 136, 137, 129, 137, 138, 130, 138, 139, 131, 139, 140, 132, 140, 141, 133, 141, 142, 134, 142, 143, 136, 144, 145, 137, 145, 146, 138, 146, 147, 139, 147, 148, 140, 148, 149, 141, 149, 150, 142, 150, 151, 144, 152, 153, 145, 153, 154, 146, 154, 155, 147, 155, 156, 148, 156, 157, 149, 157, 158, 150, 158, 159, 152, 160, 161, 153, 161, 162, 154, 162, 163, 155, 163, 164, 156, 164, 165, 157, 165, 166, 158, 166, 167, 160, 168, 169, 161, 169, 170, 162, 170, 171, 163, 171, 172, 164, 172, 173, 165, 173, 174, 166, 174, 175, 168, 176, 177, 169, 177, 178, 170, 178, 179, 171, 179, 180, 172, 180, 181, 173, 181, 182, 174, 182, 183, 176, 184, 185, 177, 185, 186, 178, 186, 187, 179, 187, 188, 180, 188, 189, 181, 189, 190, 182, 190, 191, 192, 200, 201, 193, 201, 202, 194, 202, 203, 195, 203, 204, 196, 204, 205, 197, 205, 206, 198, 206, 207, 200, 208, 209, 201, 209, 210, 202, 210, 211, 203, 211, 212, 204, 212, 213, 205, 213, 214, 206, 214, 215, 208, 216, 217, 209, 217, 218, 210, 218, 219, 211, 219, 220, 212, 220, 221, 213, 221, 222, 214, 222, 223, 216, 224, 225, 217, 225, 226, 218, 226, 227, 219, 227, 228, 220, 228, 229, 221, 229, 230, 222, 230, 231, 224, 232, 233, 225, 233, 234, 226, 234, 235, 227, 235, 236, 228, 236, 237, 229, 237, 238, 230, 238, 239, 232, 240, 241, 233, 241, 242, 234, 242, 243, 235, 243, 244, 236, 244, 245, 237, 245, 246, 238, 246, 247, 240, 248, 249, 241, 249, 250, 242, 250, 251, 243, 251, 252, 244, 252, 253, 245, 253, 254, 246, 254, 255, 256, 264, 265, 257, 265, 266, 258, 266, 267, 259, 267, 268, 260, 268, 269, 261, 269, 270, 262, 270, 271, 264, 272, 273, 265, 273, 274, 266, 274, 275, 267, 275, 276, 268, 276, 277, 269, 277, 278, 270, 278, 279, 272, 280, 281, 273, 281, 282, 274, 282, 283, 275, 283, 284, 276, 284, 285, 277, 285, 286, 278, 286, 287, 280, 288, 289, 281, 289, 290, 282, 290, 291, 283, 291, 292, 284, 292, 293, 285, 293, 294, 286, 294, 295, 288, 296, 297, 289, 297, 298, 290, 298, 299, 291, 299, 300, 292, 300, 301, 293, 301, 302, 294, 302, 303, 296, 304, 305, 297, 305, 306, 298, 306, 307, 299, 307, 308, 300, 308, 309, 301, 309, 310, 302, 310, 311, 304, 312, 313, 305, 313, 314, 306, 314, 315, 307, 315, 316, 308, 316, 317, 309, 317, 318, 310, 318, 319, 320, 328, 329, 321, 329, 330, 322, 330, 331, 323, 331, 332, 324, 332, 333, 325, 333, 334, 326, 334, 335, 328, 336, 337, 329, 337, 338, 330, 338, 339, 331, 339, 340, 332, 340, 341, 333, 341, 342, 334, 342, 343, 336, 344, 345, 337, 345, 346, 338, 346, 347, 339, 347, 348, 340, 348, 349, 341, 349, 350, 342, 350, 351, 344, 352, 353, 345, 353, 354, 346, 354, 355, 347, 355, 356, 348, 356, 357, 349, 357, 358, 350, 358, 359, 352, 360, 361, 353, 361, 362, 354, 362, 363, 355, 363, 364, 356, 364, 365, 357, 365, 366, 358, 366, 367, 360, 368, 369, 361, 369, 370, 362, 370, 371, 363, 371, 372, 364, 372, 373, 365, 373, 374, 366, 374, 375, 368, 376, 377, 369, 377, 378, 370, 378, 379, 371, 379, 380, 372, 380, 381, 373, 381, 382, 374, 382, 383, 384, 392, 393, 385, 393, 394, 386, 394, 395, 387, 395, 396, 388, 396, 397, 389, 397, 398, 390, 398, 399, 392, 400, 401, 393, 401, 402, 394, 402, 403, 395, 403, 404, 396, 404, 405, 397, 405, 406, 398, 406, 407, 400, 408, 409, 401, 409, 410, 402, 410, 411, 403, 411, 412, 404, 412, 413, 405, 413, 414, 406, 414, 415, 408, 416, 417, 409, 417, 418, 410, 418, 419, 411, 419, 420, 412, 420, 421, 413, 421, 422, 414, 422, 423, 416, 424, 425, 417, 425, 426, 418, 426, 427, 419, 427, 428, 420, 428, 429, 421, 429, 430, 422, 430, 431, 424, 432, 433, 425, 433, 434, 426, 434, 435, 427, 435, 436, 428, 436, 437, 429, 437, 438, 430, 438, 439, 432, 440, 441, 433, 441, 442, 434, 442, 443, 435, 443, 444, 436, 444, 445, 437, 445, 446, 438, 446, 447, 448, 456, 457, 449, 457, 458, 450, 458, 459, 451, 459, 460, 452, 460, 461, 453, 461, 462, 454, 462, 463, 456, 464, 465, 457, 465, 466, 458, 466, 467, 459, 467, 468, 460, 468, 469, 461, 469, 470, 462, 470, 471, 464, 472, 473, 465, 473, 474, 466, 474, 475, 467, 475, 476, 468, 476, 477, 469, 477, 478, 470, 478, 479, 472, 480, 481, 473, 481, 482, 474, 482, 483, 475, 483, 484, 476, 484, 485, 477, 485, 486, 478, 486, 487, 480, 488, 489, 481, 489, 490, 482, 490, 491, 483, 491, 492, 484, 492, 493, 485, 493, 494, 486, 494, 495, 488, 496, 497, 489, 497, 498, 490, 498, 499, 491, 499, 500, 492, 500, 501, 493, 501, 502, 494, 502, 503, 496, 504, 505, 497, 505, 506, 498, 506, 507, 499, 507, 508, 500, 508, 509, 501, 509, 510, 502, 510, 511, 512, 520, 521, 513, 521, 522, 514, 522, 523, 515, 523, 524, 516, 524, 525, 517, 525, 526, 518, 526, 527, 520, 528, 529, 521, 529, 530, 522, 530, 531, 523, 531, 532, 524, 532, 533, 525, 533, 534, 526, 534, 535, 528, 536, 537, 529, 537, 538, 530, 538, 539, 531, 539, 540, 532, 540, 541, 533, 541, 542, 534, 542, 543, 536, 544, 545, 537, 545, 546, 538, 546, 547, 539, 547, 548, 540, 548, 549, 541, 549, 550, 542, 550, 551, 544, 552, 553, 545, 553, 554, 546, 554, 555, 547, 555, 556, 548, 556, 557, 549, 557, 558, 550, 558, 559, 552, 560, 561, 553, 561, 562, 554, 562, 563, 555, 563, 564, 556, 564, 565, 557, 565, 566, 558, 566, 567, 560, 568, 569, 561, 569, 570, 562, 570, 571, 563, 571, 572, 564, 572, 573, 565, 573, 574, 566, 574, 575, 576, 584, 585, 577, 585, 586, 578, 586, 587, 579, 587, 588, 580, 588, 589, 581, 589, 590, 582, 590, 591, 584, 592, 593, 585, 593, 594, 586, 594, 595, 587, 595, 596, 588, 596, 597, 589, 597, 598, 590, 598, 599, 592, 600, 601, 593, 601, 602, 594, 602, 603, 595, 603, 604, 596, 604, 605, 597, 605, 606, 598, 606, 607, 600, 608, 609, 601, 609, 610, 602, 610, 611, 603, 611, 612, 604, 612, 613, 605, 613, 614, 606, 614, 615, 608, 616, 617, 609, 617, 618, 610, 618, 619, 611, 619, 620, 612, 620, 621, 613, 621, 622, 614, 622, 623, 616, 624, 625, 617, 625, 626, 618, 626, 627, 619, 627, 628, 620, 628, 629, 621, 629, 630, 622, 630, 631, 624, 632, 633, 625, 633, 634, 626, 634, 635, 627, 635, 636, 628, 636, 637, 629, 637, 638, 630, 638, 639, 640, 648, 649, 641, 649, 650, 642, 650, 651, 643, 651, 652, 644, 652, 653, 645, 653, 654, 646, 654, 655, 648, 656, 657, 649, 657, 658, 650, 658, 659, 651, 659, 660, 652, 660, 661, 653, 661, 662, 654, 662, 663, 656, 664, 665, 657, 665, 666, 658, 666, 667, 659, 667, 668, 660, 668, 669, 661, 669, 670, 662, 670, 671, 664, 672, 673, 665, 673, 674, 666, 674, 675, 667, 675, 676, 668, 676, 677, 669, 677, 678, 670, 678, 679, 672, 680, 681, 673, 681, 682, 674, 682, 683, 675, 683, 684, 676, 684, 685, 677, 685, 686, 678, 686, 687, 680, 688, 689, 681, 689, 690, 682, 690, 691, 683, 691, 692, 684, 692, 693, 685, 693, 694, 686, 694, 695, 688, 696, 697, 689, 697, 698, 690, 698, 699, 691, 699, 700, 692, 700, 701, 693, 701, 702, 694, 702, 703, 704, 712, 713, 705, 713, 714, 706, 714, 715, 707, 715, 716, 708, 716, 717, 709, 717, 718, 710, 718, 719, 712, 720, 721, 713, 721, 722, 714, 722, 723, 715, 723, 724, 716, 724, 725, 717, 725, 726, 718, 726, 727, 720, 728, 729, 721, 729, 730, 722, 730, 731, 723, 731, 732, 724, 732, 733, 725, 733, 734, 726, 734, 735, 728, 736, 737, 729, 737, 738, 730, 738, 739, 731, 739, 740, 732, 740, 741, 733, 741, 742, 734, 742, 743, 736, 744, 745, 737, 745, 746, 738, 746, 747, 739, 747, 748, 740, 748, 749, 741, 749, 750, 742, 750, 751, 744, 752, 753, 745, 753, 754, 746, 754, 755, 747, 755, 756, 748, 756, 757, 749, 757, 758, 750, 758, 759, 752, 760, 761, 753, 761, 762, 754, 762, 763, 755, 763, 764, 756, 764, 765, 757, 765, 766, 758, 766, 767, 768, 776, 777, 769, 777, 778, 770, 778, 779, 771, 779, 780, 772, 780, 781, 773, 781, 782, 774, 782, 783, 776, 784, 785, 777, 785, 786, 778, 786, 787, 779, 787, 788, 780, 788, 789, 781, 789, 790, 782, 790, 791, 784, 792, 793, 785, 793, 794, 786, 794, 795, 787, 795, 796, 788, 796, 797, 789, 797, 798, 790, 798, 799, 792, 800, 801, 793, 801, 802, 794, 802, 803, 795, 803, 804, 796, 804, 805, 797, 805, 806, 798, 806, 807, 800, 808, 809, 801, 809, 810, 802, 810, 811, 803, 811, 812, 804, 812, 813, 805, 813, 814, 806, 814, 815, 808, 816, 817, 809, 817, 818, 810, 818, 819, 811, 819, 820, 812, 820, 821, 813, 821, 822, 814, 822, 823, 816, 824, 825, 817, 825, 826, 818, 826, 827, 819, 827, 828, 820, 828, 829, 821, 829, 830, 822, 830, 831, 832, 840, 841, 833, 841, 842, 834, 842, 843, 835, 843, 844, 836, 844, 845, 837, 845, 846, 838, 846, 847, 840, 848, 849, 841, 849, 850, 842, 850, 851, 843, 851, 852, 844, 852, 853, 845, 853, 854, 846, 854, 855, 848, 856, 857, 849, 857, 858, 850, 858, 859, 851, 859, 860, 852, 860, 861, 853, 861, 862, 854, 862, 863, 856, 864, 865, 857, 865, 866, 858, 866, 867, 859, 867, 868, 860, 868, 869, 861, 869, 870, 862, 870, 871, 864, 872, 873, 865, 873, 874, 866, 874, 875, 867, 875, 876, 868, 876, 877, 869, 877, 878, 870, 878, 879, 872, 880, 881, 873, 881, 882, 874, 882, 883, 875, 883, 884, 876, 884, 885, 877, 885, 886, 878, 886, 887, 880, 888, 889, 881, 889, 890, 882, 890, 891, 883, 891, 892, 884, 892, 893, 885, 893, 894, 886, 894, 895, 896, 904, 905, 897, 905, 906, 898, 906, 907, 899, 907, 908, 900, 908, 909, 901, 909, 910, 902, 910, 911, 904, 912, 913, 905, 913, 914, 906, 914, 915, 907, 915, 916, 908, 916, 917, 909, 917, 918, 910, 918, 919, 912, 920, 921, 913, 921, 922, 914, 922, 923, 915, 923, 924, 916, 924, 925, 917, 925, 926, 918, 926, 927, 920, 928, 929, 921, 929, 930, 922, 930, 931, 923, 931, 932, 924, 932, 933, 925, 933, 934, 926, 934, 935, 928, 936, 937, 929, 937, 938, 930, 938, 939, 931, 939, 940, 932, 940, 941, 933, 941, 942, 934, 942, 943, 936, 944, 945, 937, 945, 946, 938, 946, 947, 939, 947, 948, 940, 948, 949, 941, 949, 950, 942, 950, 951, 944, 952, 953, 945, 953, 954, 946, 954, 955, 947, 955, 956, 948, 956, 957, 949, 957, 958, 950, 958, 959, 960, 968, 969, 961, 969, 970, 962, 970, 971, 963, 971, 972, 964, 972, 973, 965, 973, 974, 966, 974, 975, 968, 976, 977, 969, 977, 978, 970, 978, 979, 971, 979, 980, 972, 980, 981, 973, 981, 982, 974, 982, 983, 976, 984, 985, 977, 985, 986, 978, 986, 987, 979, 987, 988, 980, 988, 989, 981, 989, 990, 982, 990, 991, 984, 992, 993, 985, 993, 994, 986, 994, 995, 987, 995, 996, 988, 996, 997, 989, 997, 998, 990, 998, 999, 992, 1000, 1001, 993, 1001, 1002, 994, 1002, 1003, 995, 1003, 1004, 996, 1004, 1005, 997, 1005, 1006, 998, 1006, 1007, 1000, 1008, 1009, 1001, 1009, 1010, 1002, 1010, 1011, 1003, 1011, 1012, 1004, 1012, 1013, 1005, 1013, 1014, 1006, 1014, 1015, 1008, 1016, 1017, 1009, 1017, 1018, 1010, 1018, 1019, 1011, 1019, 1020, 1012, 1020, 1021, 1013, 1021, 1022, 1014, 1022, 1023, 1024, 1032, 1033, 1025, 1033, 1034, 1026, 1034, 1035, 1027, 1035, 1036, 1028, 1036, 1037, 1029, 1037, 1038, 1030, 1038, 1039, 1032, 1040, 1041, 1033, 1041, 1042, 1034, 1042, 1043, 1035, 1043, 1044, 1036, 1044, 1045, 1037, 1045, 1046, 1038, 1046, 1047, 1040, 1048, 1049, 1041, 1049, 1050, 1042, 1050, 1051, 1043, 1051, 1052, 1044, 1052, 1053, 1045, 1053, 1054, 1046, 1054, 1055, 1048, 1056, 1057, 1049, 1057, 1058, 1050, 1058, 1059, 1051, 1059, 1060, 1052, 1060, 1061, 1053, 1061, 1062, 1054, 1062, 1063, 1056, 1064, 1065, 1057, 1065, 1066, 1058, 1066, 1067, 1059, 1067, 1068, 1060, 1068, 1069, 1061, 1069, 1070, 1062, 1070, 1071, 1064, 1072, 1073, 1065, 1073, 1074, 1066, 1074, 1075, 1067, 1075, 1076, 1068, 1076, 1077, 1069, 1077, 1078, 1070, 1078, 1079, 1072, 1080, 1081, 1073, 1081, 1082, 1074, 1082, 1083, 1075, 1083, 1084, 1076, 1084, 1085, 1077, 1085, 1086, 1078, 1086, 1087, 1088, 1096, 1097, 1089, 1097, 1098, 1090, 1098, 1099, 1091, 1099, 1100, 1092, 1100, 1101, 1093, 1101, 1102, 1094, 1102, 1103, 1096, 1104, 1105, 1097, 1105, 1106, 1098, 1106, 1107, 1099, 1107, 1108, 1100, 1108, 1109, 1101, 1109, 1110, 1102, 1110, 1111, 1104, 1112, 1113, 1105, 1113, 1114, 1106, 1114, 1115, 1107, 1115, 1116, 1108, 1116, 1117, 1109, 1117, 1118, 1110, 1118, 1119, 1112, 1120, 1121, 1113, 1121, 1122, 1114, 1122, 1123, 1115, 1123, 1124, 1116, 1124, 1125, 1117, 1125, 1126, 1118, 1126, 1127, 1120, 1128, 1129, 1121, 1129, 1130, 1122, 1130, 1131, 1123, 1131, 1132, 1124, 1132, 1133, 1125, 1133, 1134, 1126, 1134, 1135, 1128, 1136, 1137, 1129, 1137, 1138, 1130, 1138, 1139, 1131, 1139, 1140, 1132, 1140, 1141, 1133, 1141, 1142, 1134, 1142, 1143, 1136, 1144, 1145, 1137, 1145, 1146, 1138, 1146, 1147, 1139, 1147, 1148, 1140, 1148, 1149, 1141, 1149, 1150, 1142, 1150, 1151, 1152, 1160, 1161, 1153, 1161, 1162, 1154, 1162, 1163, 1155, 1163, 1164, 1156, 1164, 1165, 1157, 1165, 1166, 1158, 1166, 1167, 1160, 1168, 1169, 1161, 1169, 1170, 1162, 1170, 1171, 1163, 1171, 1172, 1164, 1172, 1173, 1165, 1173, 1174, 1166, 1174, 1175, 1168, 1176, 1177, 1169, 1177, 1178, 1170, 1178, 1179, 1171, 1179, 1180, 1172, 1180, 1181, 1173, 1181, 1182, 1174, 1182, 1183, 1176, 1184, 1185, 1177, 1185, 1186, 1178, 1186, 1187, 1179, 1187, 1188, 1180, 1188, 1189, 1181, 1189, 1190, 1182, 1190, 1191, 1184, 1192, 1193, 1185, 1193, 1194, 1186, 1194, 1195, 1187, 1195, 1196, 1188, 1196, 1197, 1189, 1197, 1198, 1190, 1198, 1199, 1192, 1200, 1201, 1193, 1201, 1202, 1194, 1202, 1203, 1195, 1203, 1204, 1196, 1204, 1205, 1197, 1205, 1206, 1198, 1206, 1207, 1200, 1208, 1209, 1201, 1209, 1210, 1202, 1210, 1211, 1203, 1211, 1212, 1204, 1212, 1213, 1205, 1213, 1214, 1206, 1214, 1215, 1216, 1224, 1225, 1217, 1225, 1226, 1218, 1226, 1227, 1219, 1227, 1228, 1220, 1228, 1229, 1221, 1229, 1230, 1222, 1230, 1231, 1224, 1232, 1233, 1225, 1233, 1234, 1226, 1234, 1235, 1227, 1235, 1236, 1228, 1236, 1237, 1229, 1237, 1238, 1230, 1238, 1239, 1232, 1240, 1241, 1233, 1241, 1242, 1234, 1242, 1243, 1235, 1243, 1244, 1236, 1244, 1245, 1237, 1245, 1246, 1238, 1246, 1247, 1240, 1248, 1249, 1241, 1249, 1250, 1242, 1250, 1251, 1243, 1251, 1252, 1244, 1252, 1253, 1245, 1253, 1254, 1246, 1254, 1255, 1248, 1256, 1257, 1249, 1257, 1258, 1250, 1258, 1259, 1251, 1259, 1260, 1252, 1260, 1261, 1253, 1261, 1262, 1254, 1262, 1263, 1256, 1264, 1265, 1257, 1265, 1266, 1258, 1266, 1267, 1259, 1267, 1268, 1260, 1268, 1269, 1261, 1269, 1270, 1262, 1270, 1271, 1264, 1272, 1273, 1265, 1273, 1274, 1266, 1274, 1275, 1267, 1275, 1276, 1268, 1276, 1277, 1269, 1277, 1278, 1270, 1278, 1279, 1280, 1288, 1289, 1281, 1289, 1290, 1282, 1290, 1291, 1283, 1291, 1292, 1284, 1292, 1293, 1285, 1293, 1294, 1286, 1294, 1295, 1288, 1296, 1297, 1289, 1297, 1298, 1290, 1298, 1299, 1291, 1299, 1300, 1292, 1300, 1301, 1293, 1301, 1302, 1294, 1302, 1303, 1296, 1304, 1305, 1297, 1305, 1306, 1298, 1306, 1307, 1299, 1307, 1308, 1300, 1308, 1309, 1301, 1309, 1310, 1302, 1310, 1311, 1304, 1312, 1313, 1305, 1313, 1314, 1306, 1314, 1315, 1307, 1315, 1316, 1308, 1316, 1317, 1309, 1317, 1318, 1310, 1318, 1319, 1312, 1320, 1321, 1313, 1321, 1322, 1314, 1322, 1323, 1315, 1323, 1324, 1316, 1324, 1325, 1317, 1325, 1326, 1318, 1326, 1327, 1320, 1328, 1329, 1321, 1329, 1330, 1322, 1330, 1331, 1323, 1331, 1332, 1324, 1332, 1333, 1325, 1333, 1334, 1326, 1334, 1335, 1328, 1336, 1337, 1329, 1337, 1338, 1330, 1338, 1339, 1331, 1339, 1340, 1332, 1340, 1341, 1333, 1341, 1342, 1334, 1342, 1343, 1344, 1352, 1353, 1345, 1353, 1354, 1346, 1354, 1355, 1347, 1355, 1356, 1348, 1356, 1357, 1349, 1357, 1358, 1350, 1358, 1359, 1352, 1360, 1361, 1353, 1361, 1362, 1354, 1362, 1363, 1355, 1363, 1364, 1356, 1364, 1365, 1357, 1365, 1366, 1358, 1366, 1367, 1360, 1368, 1369, 1361, 1369, 1370, 1362, 1370, 1371, 1363, 1371, 1372, 1364, 1372, 1373, 1365, 1373, 1374, 1366, 1374, 1375, 1368, 1376, 1377, 1369, 1377, 1378, 1370, 1378, 1379, 1371, 1379, 1380, 1372, 1380, 1381, 1373, 1381, 1382, 1374, 1382, 1383, 1376, 1384, 1385, 1377, 1385, 1386, 1378, 1386, 1387, 1379, 1387, 1388, 1380, 1388, 1389, 1381, 1389, 1390, 1382, 1390, 1391, 1384, 1392, 1393, 1385, 1393, 1394, 1386, 1394, 1395, 1387, 1395, 1396, 1388, 1396, 1397, 1389, 1397, 1398, 1390, 1398, 1399, 1392, 1400, 1401, 1393, 1401, 1402, 1394, 1402, 1403, 1395, 1403, 1404, 1396, 1404, 1405, 1397, 1405, 1406, 1398, 1406, 1407, 1408, 1416, 1417, 1409, 1417, 1418, 1410, 1418, 1419, 1411, 1419, 1420, 1412, 1420, 1421, 1413, 1421, 1422, 1414, 1422, 1423, 1416, 1424, 1425, 1417, 1425, 1426, 1418, 1426, 1427, 1419, 1427, 1428, 1420, 1428, 1429, 1421, 1429, 1430, 1422, 1430, 1431, 1424, 1432, 1433, 1425, 1433, 1434, 1426, 1434, 1435, 1427, 1435, 1436, 1428, 1436, 1437, 1429, 1437, 1438, 1430, 1438, 1439, 1432, 1440, 1441, 1433, 1441, 1442, 1434, 1442, 1443, 1435, 1443, 1444, 1436, 1444, 1445, 1437, 1445, 1446, 1438, 1446, 1447, 1440, 1448, 1449, 1441, 1449, 1450, 1442, 1450, 1451, 1443, 1451, 1452, 1444, 1452, 1453, 1445, 1453, 1454, 1446, 1454, 1455, 1448, 1456, 1457, 1449, 1457, 1458, 1450, 1458, 1459, 1451, 1459, 1460, 1452, 1460, 1461, 1453, 1461, 1462, 1454, 1462, 1463, 1456, 1464, 1465, 1457, 1465, 1466, 1458, 1466, 1467, 1459, 1467, 1468, 1460, 1468, 1469, 1461, 1469, 1470, 1462, 1470, 1471, 1472, 1480, 1481, 1473, 1481, 1482, 1474, 1482, 1483, 1475, 1483, 1484, 1476, 1484, 1485, 1477, 1485, 1486, 1478, 1486, 1487, 1480, 1488, 1489, 1481, 1489, 1490, 1482, 1490, 1491, 1483, 1491, 1492, 1484, 1492, 1493, 1485, 1493, 1494, 1486, 1494, 1495, 1488, 1496, 1497, 1489, 1497, 1498, 1490, 1498, 1499, 1491, 1499, 1500, 1492, 1500, 1501, 1493, 1501, 1502, 1494, 1502, 1503, 1496, 1504, 1505, 1497, 1505, 1506, 1498, 1506, 1507, 1499, 1507, 1508, 1500, 1508, 1509, 1501, 1509, 1510, 1502, 1510, 1511, 1504, 1512, 1513, 1505, 1513, 1514, 1506, 1514, 1515, 1507, 1515, 1516, 1508, 1516, 1517, 1509, 1517, 1518, 1510, 1518, 1519, 1512, 1520, 1521, 1513, 1521, 1522, 1514, 1522, 1523, 1515, 1523, 1524, 1516, 1524, 1525, 1517, 1525, 1526, 1518, 1526, 1527, 1520, 1528, 1529, 1521, 1529, 1530, 1522, 1530, 1531, 1523, 1531, 1532, 1524, 1532, 1533, 1525, 1533, 1534, 1526, 1534, 1535] ;

    faces_length = faces.length;        // global variable: this is the total number of triangles 
    // Now send the element array to GL
    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(faces), gl.STATIC_DRAW);
}

// drawScene
// Draw the scene.
function drawScene()
{
    gl.clearColor(0.2, 0.2, 0.2, 1.0);
    gl.scissor(0, 0, 200, 200);
    // create a viewport
    //gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);
    gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);
     // Clear the canvas before we start drawing on it
    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

    // Establish the projection with which we want to view the
    // scene. Our field of view is 100 degrees, with a width/height
    // ratio of 640:480, and we only want to see objects between 0.1 units
    // and 100 units away from the camera.

    aspect_ratio = canvas.clientWidth/canvas.clientHeight;

    ProjectionMatrix = makePerspective(45, aspect_ratio, 0.1, 100.0);
//    ProjectionMatrix = makeOrtho(45, aspect_ratio, 0.1, 100.0);


    ViewMatrix = makeLookAt(0, 0, 4, 0, 0, -1, 0, 1, 0 );


    // Set the drawing position to the "identity" point, which is
    // the center of the scene.
    loadIdentity();

    // Now move the drawing position a bit to where we want to start
    // drawing the cube.
    mvScale(scale_x, scale_y, scale_z);
    mvRotate(degToRad(rotate_x), [1, 0, 0]);
    mvRotate(degToRad(rotate_y), [0, 1, 0]);
    mvRotate(degToRad(rotate_z), [0, 0, 1]);

    mvTranslate([0, 0.0, -6.0]);
    //lets see what happens
    // Save the current matrix, then rotate before we draw.
    //mvPushMatrix();


    // Draw the object by binding the faces buffer to the object's vertices
    // array, setting attributes, and pushing it to GL.
    gl.bindBuffer(gl.ARRAY_BUFFER, Vertices_Buffer);
    gl.vertexAttribPointer(vertexPositionAttribute, vertices_length, gl.FLOAT, false, 0, 0);


    // Draw the object.
    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, Faces_Buffer);
    setMatrixUniforms();

    // There are so many ways we can draw 
    // gl.drawElementRange, drawArrays, drawTriangles and so forth
    gl.drawElements(gl.TRIANGLES, faces_length, gl.UNSIGNED_SHORT, 0 );
   //gl.drawArrays(gl.TRIANGLES, 0, 3);

    // If we want multiple view ports we can do something like this
//    gl.clearColor(0.2, 0.2, 0.2, 1.0);
//    gl.scissor(0, 10, 200, 200);
//    // create a viewport
//    //gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);
//    gl.viewport(10, 200, gl.viewportWidth, gl.viewportHeight);
//     // Clear the canvas before we start drawing on it
//    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
//    gl.drawElements(gl.TRIANGLES, faces_length, gl.UNSIGNED_SHORT, 0 );
}



// initShaders
// Initialize the shaders, so WebGL knows how to light our scene.
function initShaders()
{
    var fragmentShader = getShader(gl, "shader-fs");
    var vertexShader = getShader(gl, "shader-vs");

    // Create the shader program
    shaderProgram = gl.createProgram();
    gl.attachShader(shaderProgram, vertexShader);
    gl.attachShader(shaderProgram, fragmentShader);
    gl.linkProgram(shaderProgram);

    // If creating the shader program failed, alert
    if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS))
    {
        alert("Unable to initialize the shader program.");
    }

    // now use the shader program
    gl.useProgram(shaderProgram);

    // defines the vertex position attribute
    vertexPositionAttribute = gl.getAttribLocation(shaderProgram, "aVertexPosition");
    gl.enableVertexAttribArray(vertexPositionAttribute);

}

// getShader
// Loads a shader program by scouring the current document,
// looking for a script with the specified ID.
function getShader(gl, id)
{
    var shaderScript = document.getElementById(id);
    // Didn't find an element with the specified ID; abort.
    if (!shaderScript)
    {
        return null;
    }

    // Walk through the source element's children, building the
    // shader source string.
    var theSource = "";
    var currentChild = shaderScript.firstChild;

    while(currentChild)
    {
        if (currentChild.nodeType == 3)
        {
            theSource += currentChild.textContent;
        }
        currentChild = currentChild.nextSibling;
    }

    // Now figure out what type of shader script we have,
    // based on its MIME type.
    var shader;

    if (shaderScript.type == "x-shader/x-fragment") 
    {
        shader = gl.createShader(gl.FRAGMENT_SHADER);
    } 
    else if (shaderScript.type == "x-shader/x-vertex") 
    {
        shader = gl.createShader(gl.VERTEX_SHADER);
    } 
    else 
    {
        return null;  // Unknown shader type
    }

    // Send the source to the shader object
    gl.shaderSource(shader, theSource);

    // Compile the shader program
    gl.compileShader(shader);

    // See if it compiled successfully
    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) 
    {
        alert("An error occurred compiling the shaders: " + gl.getShaderInfoLog(shader));
        return null;
    }
    return shader;
}




/********************** Very Useful Matrix utility functions ***************/
/********************** Very Useful Matrix utility functions ***************/
/********************** Very Useful Matrix utility functions ***************/

/** This function sets the model view matrix as identity */
function loadIdentity()
{
    // reset the model view matrix to identity matrix
    ModelMatrix = Matrix.I(4);
    // reset the projection matrix to identity matrix
   // pMatrix = Matrix.I(4);
}


/** This function rotates the model view matrix by a certain angle at specified [x, y, z] direction  */
function mvRotate(angle, v)
{
    var inRadians = angle * Math.PI / 180.0;

    var m = Matrix.Rotation(inRadians, $V([v[0], v[1], v[2]])).ensure4x4();
    multMatrix(m);
}

/** This function scales the model view matrix by certain scale factors as specified [sx, sy, sz] */
function mvScale(sx, sy, sz)
{

   var scale = $M([[sx, 0, 0, 0],
                   [0, sy, 0, 0],
                   [0, 0, sz, 0],
                   [0, 0, 0, 1]]);

    multMatrix(scale);
}


/** This function multiplies a matrix with model view matrix */
function multMatrix(m)
{
    ModelMatrix = ModelMatrix.x(m);
}


/** This function translates the model view matrix in with the translation factors [tx, ty, tx] */
function mvTranslate(v)
{
    multMatrix(Matrix.Translation($V([v[0], v[1], v[2]])).ensure4x4());
}

function setMatrixUniforms()
{
    var pUniform = gl.getUniformLocation(shaderProgram, "uProjectionMatrix");
    gl.uniformMatrix4fv(pUniform, false, new Float32Array(ProjectionMatrix.flatten()));

    var mvUniform = gl.getUniformLocation(shaderProgram, "uModelMatrix");
    gl.uniformMatrix4fv(mvUniform, false, new Float32Array(ModelMatrix.flatten()));

    var ViewMatrixUniform = gl.getUniformLocation(shaderProgram, "uViewMatrix");
    gl.uniformMatrix4fv(ViewMatrixUniform, false, new Float32Array(ViewMatrix.flatten()));
}

var ModelMatrixStack = [];

/** This function pushes the mv matrix to the stack */
function mvPushMatrix(m)
{
    if (m) 
    {
        ModelMatrixStack.push(m.dup());
        ModelMatrix = m.dup();
    } 
    else 
    {
        ModelMatrixStack.push(ModelMatrix.dup());
    }
}

/** This function pops the model view matrix from the stack and returns it */
function mvPopMatrix()
{
    if (!ModelMatrixStack.length)
    {
        throw("Can't pop from an empty matrix stack.");
    }

    ModelMatrix = ModelMatrixStack.pop();
    return ModelMatrix;
}


function degToRad(angle)
{
    return angle * Math.PI / 180.0;

}

